#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.19
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1217104709',
        'version' => '1.23',
        'name' => 'complex',
        'author' => 'abw',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $error;
        
        eval { BLOCK: {
    
    #line 5 "t/test/src/complex"
    $output .=  $context->include('header', { 'title' => 'Yet Another Template Test' });
    $output .=  "\nThis is a more complex file which includes some BLOCK definitions\n";
    #line 7 "t/test/src/complex"
    $output .=  $context->include('footer');
    $output .=  "\n\n";
    
    $output .=  "\n";
    
    $output .=  "\n\n";
        } };
        if ($@) {
            $error = $context->catch($@, \$output);
            die $error unless $error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {
        'footer' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $error;
            
            eval { BLOCK: {
        $output .=  "This is the footer, author: ";
        #line 14 "t/test/src/complex"
        $output .=  $stash->get(['template', 0, 'author', 0]);
        $output .=  ", version: ";
        #line 14 "t/test/src/complex"
        $output .=  $stash->get(['template', 0, 'version', 0]);
        $output .=  "\n";
        #line 0 "t/test/src/complex"
        
        # FOREACH 
        do {
            my ($value, $error, $oldloop);
            my $list = [ 3, 2, 1 ];
            
            unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
                $list = Template::Config->iterator($list)
                    || die $Template::Config::ERROR, "\n"; 
            }
        
            ($value, $error) = $list->get_first();
            eval { $oldloop = $stash->get('loop') };
            $stash->set('loop', $list);
            eval {
        LOOP:   while (! $error) {
                    $stash->{'x'} = $value;
        $output .=  ("- " . $stash->get('x') . " ");;
                    ($value, $error) = $list->get_next();
                }
            };
            $stash->set('loop', $oldloop);
            die $@ if $@;
            $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
            die $error if $error;
        };
        
            } };
            if ($@) {
                $error = $context->catch($@, \$output);
                die $error unless $error->type eq 'return';
            }
        
            return $output;
        },
        'header' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $error;
            
            eval { BLOCK: {
        $output .=  "This is the header, title: ";
        #line 10 "t/test/src/complex"
        $output .=  $stash->get('title');
            } };
            if ($@) {
                $error = $context->catch($@, \$output);
                die $error unless $error->type eq 'return';
            }
        
            return $output;
        },
    },
});

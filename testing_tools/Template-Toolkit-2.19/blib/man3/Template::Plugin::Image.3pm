.\" Automatically generated by Pod::Man 2.12 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Template::Plugin::Image 3"
.TH Template::Plugin::Image 3 "2007-04-27" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Template::Plugin::Image \- Plugin access to image sizes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&    [% USE Image(filename) %]
\&    [% Image.width %]
\&    [% Image.height %]
\&    [% Image.size.join(', ') %]
\&    [% Image.attr %]
\&    [% Image.tag %]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This plugin provides an interface to the Image::Info or Image::Size
modules for determining the size of image files.
.PP
You can specify the plugin name as either 'Image' or 'image'.  The
plugin object created will then have the same name.  The file name of
the image should be specified as a positional or named argument.
.PP
.Vb 6
\&    [% # all these are valid, take your pick %]
\&    [% USE Image('foo.gif') %]
\&    [% USE image('bar.gif') %]
\&    [% USE Image 'ping.gif' %]
\&    [% USE image(name='baz.gif') %]
\&    [% USE Image name='pong.gif' %]
.Ve
.PP
A \*(L"root\*(R" parameter can be used to specify the location of the image file:
.PP
.Vb 3
\&    [% USE Image(root='/path/to/root', name='images/home.png') %]
\&    # image path: /path/to/root/images/home.png
\&    # img src: images/home.png
.Ve
.PP
In cases where the image path and image url do not match up, specify the
file name directly:
.PP
.Vb 1
\&    [% USE Image(file='/path/to/home.png', name='/images/home.png') %]
.Ve
.PP
The \*(L"alt\*(R" parameter can be used to specify an alternate name for the
image, for use in constructing an \s-1XHTML\s0 element (see the \fItag()\fR method
below).
.PP
.Vb 1
\&    [% USE Image('home.png', alt="Home") %]
.Ve
.PP
You can also provide an alternate name for an Image plugin object.
.PP
.Vb 2
\&    [% USE img1 = image 'foo.gif' %]
\&    [% USE img2 = image 'bar.gif' %]
.Ve
.PP
The 'name' method returns the image file name.
.PP
.Vb 1
\&    [% img1.name %]     # foo.gif
.Ve
.PP
The 'width' and 'height' methods return the width and height of the
image, respectively.  The 'size' method returns a reference to a 2
element list containing the width and height.
.PP
.Vb 4
\&    [% USE image 'foo.gif' %]
\&    width: [% image.width %]
\&    height: [% image.height %]
\&    size: [% image.size.join(', ') %]
.Ve
.PP
The 'modtime' method returns the ctime of the file in question, suitable
for use with date.format:
.PP
.Vb 3
\&    [% USE image 'foo.gif' %]
\&    [% USE date %]
\&    [% date.format(image.modtime, "%B, %e %Y") %]
.Ve
.PP
The 'attr' method returns the height and width as \s-1HTML/XML\s0 attributes.
.PP
.Vb 2
\&    [% USE image 'foo.gif' %]
\&    [% image.attr %]
.Ve
.PP
Typical output:
.PP
.Vb 1
\&    width="60" height="20"
.Ve
.PP
The 'tag' method returns a complete \s-1XHTML\s0 tag referencing the image.
.PP
.Vb 2
\&    [% USE image 'foo.gif' %]
\&    [% image.tag %]
.Ve
.PP
Typical output:
.PP
.Vb 1
\&    <img src="foo.gif" width="60" height="20" alt="" />
.Ve
.PP
You can provide any additional attributes that should be added to the 
\&\s-1XHTML\s0 tag.
.PP
.Vb 2
\&    [% USE image 'foo.gif' %]
\&    [% image.tag(class="logo" alt="Logo") %]
.Ve
.PP
Typical output:
.PP
.Vb 1
\&    <img src="foo.gif" width="60" height="20" alt="Logo" class="logo" />
.Ve
.PP
Note that the 'alt' attribute is mandatory in a strict \s-1XHTML\s0 'img'
element (even if it's empty) so it is always added even if you don't
explicitly provide a value for it.  You can do so as an argument to 
the 'tag' method, as shown in the previous example, or as an argument
.PP
.Vb 1
\&    [% USE image('foo.gif', alt='Logo') %]
.Ve
.SH "CATCHING ERRORS"
.IX Header "CATCHING ERRORS"
If the image file cannot be found then the above methods will throw an
\&'Image' error.  You can enclose calls to these methods in a
\&\s-1TRY\s0...CATCH block to catch any potential errors.
.PP
.Vb 6
\&    [% TRY;
\&         image.width;
\&       CATCH;
\&         error;      # print error
\&       END
\&    %]
.Ve
.SH "USING Image::Info"
.IX Header "USING Image::Info"
At run time, the plugin tries to load Image::Info in preference to
Image::Size. If Image::Info is found, then some additional methods are
available, in addition to 'size', 'width', 'height', 'attr', and 'tag'.
These additional methods are named after the elements that Image::Info
retrieves from the image itself; see Image::Info for more details
\&\*(-- the types of methods available depend on the type of image.
These additional methods will always include the following:
.IP "file_media_type" 4
.IX Item "file_media_type"
This is the \s-1MIME\s0 type that is appropriate for the given file format.
The corresponding value is a string like: \*(L"image/png\*(R" or \*(L"image/jpeg\*(R".
.IP "file_ext" 4
.IX Item "file_ext"
The is the suggested file name extention for a file of the given
file format.  The value is a 3 letter, lowercase string like
\&\*(L"png\*(R", \*(L"jpg\*(R".
.IP "color_type" 4
.IX Item "color_type"
The value is a short string describing what kind of values the pixels
encode.  The value can be one of the following:
.Sp
.Vb 7
\&  Gray
\&  GrayA
\&  RGB
\&  RGBA
\&  CMYK
\&  YCbCr
\&  CIELab
.Ve
.Sp
These names can also be prefixed by \*(L"Indexed\-\*(R" if the image is
composed of indexes into a palette.  Of these, only \*(L"Indexed-RGB\*(R" is
likely to occur.
.Sp
(It is similar to the \s-1TIFF\s0 field PhotometricInterpretation, but this
name was found to be too long, so we used the \s-1PNG\s0 inpired term
instead.)
.IP "resolution" 4
.IX Item "resolution"
The value of this field normally gives the physical size of the image
on screen or paper. When the unit specifier is missing then this field
denotes the squareness of pixels in the image.
.Sp
The syntax of this field is:
.Sp
.Vb 3
\&   <res> <unit>
\&   <xres> "/" <yres> <unit>
\&   <xres> "/" <yres>
.Ve
.Sp
The <res>, <xres> and <yres> fields are
numbers.  The <unit> is a string like \f(CW\*(C`dpi\*(C'\fR, \f(CW\*(C`dpm\*(C'\fR or
\&\f(CW\*(C`dpcm\*(C'\fR (denoting "dots per inch/cm/meter).
.IP "SamplesPerPixel" 4
.IX Item "SamplesPerPixel"
This says how many channels there are in the image.  For some image
formats this number might be higher than the number implied from the
\&\f(CW\*(C`color_type\*(C'\fR.
.IP "BitsPerSample" 4
.IX Item "BitsPerSample"
This says how many bits are used to encode each of samples.  The value
is a reference to an array containing numbers. The number of elements
in the array should be the same as \f(CW\*(C`SamplesPerPixel\*(C'\fR.
.IP "Comment" 4
.IX Item "Comment"
Textual comments found in the file.  The value is a reference to an
array if there are multiple comments found.
.IP "Interlace" 4
.IX Item "Interlace"
If the image is interlaced, then this tell which interlace method is
used.
.IP "Compression" 4
.IX Item "Compression"
This tell which compression algorithm is used.
.IP "Gamma" 4
.IX Item "Gamma"
A number.
.SH "AUTHOR"
.IX Header "AUTHOR"
Andy Wardley <abw@wardley.org>
.PP
<http://wardley.org/|http://wardley.org/>
.SH "VERSION"
.IX Header "VERSION"
1.21, distributed as part of the
Template Toolkit version 2.19, released on 27 April 2007.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 1
\&  Copyright (C) 1996\-2007 Andy Wardley.  All Rights Reserved.
.Ve
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Template::Plugin

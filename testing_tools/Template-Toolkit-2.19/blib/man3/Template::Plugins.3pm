.\" Automatically generated by Pod::Man 2.12 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Template::Plugins 3"
.TH Template::Plugins 3 "2007-04-27" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Template::Plugins \- Plugin provider module
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Template::Plugins;
\&
\&    $plugin_provider = Template::Plugins\->new(\e%options);
\&
\&    ($plugin, $error) = $plugin_provider\->fetch($name, @args);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Template::Plugins module defines a provider class which can be used
to load and instantiate Template Toolkit plugin modules.
.SH "METHODS"
.IX Header "METHODS"
.Sh "new(\e%params)"
.IX Subsection "new(%params)"
Constructor method which instantiates and returns a reference to a
Template::Plugins object.  A reference to a hash array of configuration
items may be passed as a parameter.  These are described below.
.PP
Note that the Template.pm front-end module creates a Template::Plugins
provider, passing all configuration items.  Thus, the examples shown
below in the form:
.PP
.Vb 5
\&    $plugprov = Template::Plugins\->new({
\&        PLUGIN_BASE => 'MyTemplate::Plugin',
\&        LOAD_PERL   => 1,
\&        ...
\&    });
.Ve
.PP
can also be used via the Template module as:
.PP
.Vb 5
\&    $ttengine = Template\->new({
\&        PLUGIN_BASE => 'MyTemplate::Plugin',
\&        LOAD_PERL   => 1,
\&        ...
\&    });
.Ve
.PP
as well as the more explicit form of:
.PP
.Vb 5
\&    $plugprov = Template::Plugins\->new({
\&        PLUGIN_BASE => 'MyTemplate::Plugin',
\&        LOAD_PERL   => 1,
\&        ...
\&    });
\&
\&    $ttengine = Template\->new({
\&        LOAD_PLUGINS => [ $plugprov ],
\&    });
.Ve
.ie n .Sh "fetch($name, @args)"
.el .Sh "fetch($name, \f(CW@args\fP)"
.IX Subsection "fetch($name, @args)"
Called to request that a plugin of a given name be provided.  The relevant 
module is first loaded (if necessary) and the \fIload()\fR class method called 
to return the factory class name (usually the same package name) or a 
factory object (a prototype).  The \fInew()\fR method is then called as a 
class or object method against the factory, passing all remaining
parameters.
.PP
Returns a reference to a new plugin object or ($error, \s-1STATUS_ERROR\s0)
on error.  May also return (undef, \s-1STATUS_DECLINED\s0) to decline to
serve the request.  If \s-1TOLERANT\s0 is set then all errors will be
returned as declines.
.SH "CONFIGURATION OPTIONS"
.IX Header "CONFIGURATION OPTIONS"
The following list details the configuration options that can be provided
to the Template::Plugins \fInew()\fR constructor.
.IP "\s-1PLUGINS\s0" 4
.IX Item "PLUGINS"
The \s-1PLUGINS\s0 options can be used to provide a reference to a hash array
that maps plugin names to Perl module names.  A number of standard
plugins are defined (e.g. 'table', 'cgi', 'dbi', etc.) which map to
their corresponding Template::Plugin::* counterparts.  These can be
redefined by values in the \s-1PLUGINS\s0 hash.
.Sp
.Vb 7
\&    my $plugins = Template::Plugins\->new({
\&        PLUGINS => {
\&            cgi => 'MyOrg::Template::Plugin::CGI',
\&            foo => 'MyOrg::Template::Plugin::Foo',
\&            bar => 'MyOrg::Template::Plugin::Bar',
\&        },  
\&    });
.Ve
.Sp
The recommended convention is to specify these plugin names in lower
case.  The Template Toolkit first looks for an exact case-sensitive
match and then tries the lower case conversion of the name specified.
.Sp
.Vb 1
\&    [% USE Foo %]      # look for 'Foo' then 'foo'
.Ve
.Sp
If you define all your \s-1PLUGINS\s0 with lower case names then they will be
located regardless of how the user specifies the name in the \s-1USE\s0
directive.  If, on the other hand, you define your \s-1PLUGINS\s0 with upper
or mixed case names then the name specified in the \s-1USE\s0 directive must
match the case exactly.
.Sp
The \s-1USE\s0 directive is used to create plugin objects and does so by
calling the \fIplugin()\fR method on the current Template::Context object.
If the plugin name is defined in the \s-1PLUGINS\s0 hash then the
corresponding Perl module is loaded via \fIrequire()\fR.  The context then
calls the \fIload()\fR class method which should return the class name 
(default and general case) or a prototype object against which the 
\&\fInew()\fR method can be called to instantiate individual plugin objects.
.Sp
If the plugin name is not defined in the \s-1PLUGINS\s0 hash then the
\&\s-1PLUGIN_BASE\s0 and/or \s-1LOAD_PERL\s0 options come into effect.
.IP "\s-1PLUGIN_BASE\s0" 4
.IX Item "PLUGIN_BASE"
If a plugin is not defined in the \s-1PLUGINS\s0 hash then the \s-1PLUGIN_BASE\s0 is used
to attempt to construct a correct Perl module name which can be successfully 
loaded.
.Sp
The \s-1PLUGIN_BASE\s0 can be specified as a reference to an array of module
namespaces, or as a single value which is automatically converted to a
list.  The default \s-1PLUGIN_BASE\s0 value ('Template::Plugin') is then added
to the end of this list.
.Sp
example 1:
.Sp
.Vb 3
\&    my $plugins = Template::Plugins\->new({
\&        PLUGIN_BASE => 'MyOrg::Template::Plugin',
\&    });
\&
\&    [% USE Foo %]    # => MyOrg::Template::Plugin::Foo
\&                       or        Template::Plugin::Foo
.Ve
.Sp
example 2:
.Sp
.Vb 4
\&    my $plugins = Template::Plugins\->new({
\&        PLUGIN_BASE => [   'MyOrg::Template::Plugin',
\&                           'YourOrg::Template::Plugin'  ],
\&    });
\&
\&    [% USE Foo %]    # =>   MyOrg::Template::Plugin::Foo
\&                       or YourOrg::Template::Plugin::Foo 
\&                       or          Template::Plugin::Foo
.Ve
.Sp
If you don't want the default Template::Plugin namespace added to the
end of the \s-1PLUGIN_BASE\s0, then set the \f(CW$Template::Plugins::PLUGIN_BASE\fR
variable to a false value before calling the Template::Plugins \fInew()\fR
constructor method.  This is shown in the example below where the
\&'Foo' is located as 'My::Plugin::Foo' or 'Your::Plugin::Foo' but not 
as 'Template::Plugin::Foo'.
.Sp
example 3:
.Sp
.Vb 2
\&    use Template::Plugins;
\&    $Template::Plugins::PLUGIN_BASE = '';
\&
\&    my $plugins = Template::Plugins\->new({
\&        PLUGIN_BASE => [   'My::Plugin',
\&                           'Your::Plugin'  ],
\&    });
\&
\&    [% USE Foo %]    # =>   My::Plugin::Foo
\&                       or Your::Plugin::Foo
.Ve
.IP "\s-1LOAD_PERL\s0" 4
.IX Item "LOAD_PERL"
If a plugin cannot be loaded using the \s-1PLUGINS\s0 or \s-1PLUGIN_BASE\s0
approaches then the provider can make a final attempt to load the
module without prepending any prefix to the module path.  This allows
regular Perl modules (i.e. those that don't reside in the
Template::Plugin or some other such namespace) to be loaded and used
as plugins.
.Sp
By default, the \s-1LOAD_PERL\s0 option is set to 0 and no attempt will be made
to load any Perl modules that aren't named explicitly in the \s-1PLUGINS\s0
hash or reside in a package as named by one of the \s-1PLUGIN_BASE\s0
components.
.Sp
Plugins loaded using the \s-1PLUGINS\s0 or \s-1PLUGIN_BASE\s0 receive a reference to
the current context object as the first argument to the \fInew()\fR
constructor.  Modules loaded using \s-1LOAD_PERL\s0 are assumed to not
conform to the plugin interface.  They must provide a \fInew()\fR class
method for instantiating objects but it will not receive a reference
to the context as the first argument.  Plugin modules should provide a
\&\fIload()\fR class method (or inherit the default one from the
Template::Plugin base class) which is called the first time the plugin
is loaded.  Regular Perl modules need not.  In all other respects,
regular Perl objects and Template Toolkit plugins are identical.
.Sp
If a particular Perl module does not conform to the common, but not
unilateral, \fInew()\fR constructor convention then a simple plugin wrapper
can be written to interface to it.
.IP "\s-1TOLERANT\s0" 4
.IX Item "TOLERANT"
The \s-1TOLERANT\s0 flag is used by the various Template Toolkit provider
modules (Template::Provider, Template::Plugins, Template::Filters) to
control their behaviour when errors are encountered.  By default, any
errors are reported as such, with the request for the particular
resource (template, plugin, filter) being denied and an exception
raised.  When the \s-1TOLERANT\s0 flag is set to any true values, errors will
be silently ignored and the provider will instead return
\&\s-1STATUS_DECLINED\s0.  This allows a subsequent provider to take
responsibility for providing the resource, rather than failing the
request outright.  If all providers decline to service the request,
either through tolerated failure or a genuine disinclination to
comply, then a '<resource> not found' exception is raised.
.IP "\s-1DEBUG\s0" 4
.IX Item "DEBUG"
The \s-1DEBUG\s0 option can be used to enable debugging messages from the
Template::Plugins module by setting it to include the \s-1DEBUG_PLUGINS\s0
value.
.Sp
.Vb 1
\&    use Template::Constants qw( :debug );
\&
\&    my $template = Template\->new({
\&        DEBUG => DEBUG_FILTERS | DEBUG_PLUGINS,
\&    });
.Ve
.SH "TEMPLATE TOOLKIT PLUGINS"
.IX Header "TEMPLATE TOOLKIT PLUGINS"
The following plugin modules are distributed with the Template
Toolkit.  Some of the plugins interface to external modules (detailed
below) which should be downloaded from any \s-1CPAN\s0 site and installed
before using the plugin.
.Sh "Autoformat"
.IX Subsection "Autoformat"
The Autoformat plugin is an interface to Damian Conway's Text::Autoformat 
Perl module which provides advanced text wrapping and formatting.  See
Template::Plugin::Autoformat and Text::Autoformat for further 
details.
.PP
.Vb 3
\&    [% USE autoformat(left=10, right=20) %]
\&    [% autoformat(mytext) %]        # call autoformat sub
\&    [% mytext FILTER autoformat %]  # or use autoformat filter
.Ve
.PP
The Text::Autoformat module is available from \s-1CPAN:\s0
.PP
.Vb 1
\&    http://www.cpan.org/modules/by\-module/Text/
.Ve
.Sh "\s-1CGI\s0"
.IX Subsection "CGI"
The \s-1CGI\s0 plugin is a wrapper around Lincoln Stein's 
<lstein@genome.wi.mit.edu> \s-1CGI\s0.pm module.  The plugin is 
distributed with the Template Toolkit (see Template::Plugin::CGI)
and the \s-1CGI\s0 module itself is distributed with recent versions Perl,
or is available from \s-1CPAN\s0.
.PP
.Vb 6
\&    [% USE CGI %]
\&    [% CGI.param('param_name') %]
\&    [% CGI.start_form %]
\&    [% CGI.popup_menu( Name   => 'color', 
\&                       Values => [ 'Green', 'Brown' ] ) %]
\&    [% CGI.end_form %]
.Ve
.Sh "Datafile"
.IX Subsection "Datafile"
Provides an interface to data stored in a plain text file in a simple
delimited format.  The first line in the file specifies field names
which should be delimiter by any non-word character sequence.
Subsequent lines define data using the same delimiter as in the first
line.  Blank lines and comments (lines starting '#') are ignored.  See
Template::Plugin::Datafile for further details.
.PP
/tmp/mydata:
.PP
.Vb 5
\&    # define names for each field
\&    id : email : name : tel
\&    # here's the data
\&    fred : fred@here.com : Fred Smith : 555\-1234
\&    bill : bill@here.com : Bill White : 555\-5678
.Ve
.PP
example:
.PP
.Vb 1
\&    [% USE userlist = datafile('/tmp/mydata') %]
\&
\&    [% FOREACH user = userlist %]
\&       [% user.name %] ([% user.id %])
\&    [% END %]
.Ve
.Sh "Date"
.IX Subsection "Date"
The Date plugin provides an easy way to generate formatted time and date
strings by delegating to the \s-1POSIX\s0 \fIstrftime()\fR routine.   See
Template::Plugin::Date and \s-1POSIX\s0 for further details.
.PP
.Vb 2
\&    [% USE date %]
\&    [% date.format %]           # current time/date
\&
\&    File last modified: [% date.format(template.modtime) %]
.Ve
.Sh "Directory"
.IX Subsection "Directory"
The Directory plugin provides a simple interface to a directory and
the files within it.  See Template::Plugin::Directory for further
details.
.PP
.Vb 7
\&    [% USE dir = Directory('/tmp') %]
\&    [% FOREACH file = dir.files %]
\&        # all the plain files in the directory
\&    [% END %]
\&    [% FOREACH file = dir.dirs %]
\&        # all the sub\-directories
\&    [% END %]
.Ve
.Sh "\s-1DBI\s0"
.IX Subsection "DBI"
The \s-1DBI\s0 plugin is no longer distributed as part of the Template Toolkit
(as of version 2.15).  It is now available as a separate Template-Plugin-DBI 
distribution from \s-1CPAN\s0.
.Sh "Dumper"
.IX Subsection "Dumper"
The Dumper plugin provides an interface to the Data::Dumper module.  See
Template::Plugin::Dumper and Data::Dumper for futher details.
.PP
.Vb 2
\&    [% USE dumper(indent=0, pad="<br>") %]
\&    [% dumper.dump(myvar, yourvar) %]
.Ve
.Sh "File"
.IX Subsection "File"
The File plugin provides a general abstraction for files and can be
used to fetch information about specific files within a filesystem.
See Template::Plugin::File for further details.
.PP
.Vb 4
\&    [% USE File('/tmp/foo.html') %]
\&    [% File.name %]     # foo.html
\&    [% File.dir %]      # /tmp
\&    [% File.mtime %]    # modification time
.Ve
.Sh "Filter"
.IX Subsection "Filter"
This module implements a base class plugin which can be subclassed
to easily create your own modules that define and install new filters.
.PP
.Vb 1
\&    package MyOrg::Template::Plugin::MyFilter;
\&
\&    use Template::Plugin::Filter;
\&    use base qw( Template::Plugin::Filter );
\&
\&    sub filter {
\&        my ($self, $text) = @_;
\&
\&        # ...mungify $text...
\&
\&        return $text;
\&    }
\&
\&    # now load it...
\&    [% USE MyFilter %]
\&
\&    # ...and use the returned object as a filter
\&    [% FILTER $MyFilter %]
\&      ...
\&    [% END %]
.Ve
.PP
See Template::Plugin::Filter for further details.
.Sh "Format"
.IX Subsection "Format"
The Format plugin provides a simple way to format text according to a
\&\fIprintf()\fR\-like format.   See Template::Plugin::Format for further 
details.
.PP
.Vb 2
\&    [% USE bold = format('<b>%s</b>') %]
\&    [% bold('Hello') %]
.Ve
.Sh "\s-1GD\s0"
.IX Subsection "GD"
The \s-1GD\s0 plugins are no longer part of the core Template Toolkit distribution.
They are now available in a separate Template-GD distribution.
.Sh "\s-1HTML\s0"
.IX Subsection "HTML"
The \s-1HTML\s0 plugin is very basic, implementing a few useful
methods for generating \s-1HTML\s0.  It is likely to be extended in the future
or integrated with a larger project to generate \s-1HTML\s0 elements in a generic
way (as discussed recently on the mod_perl mailing list).
.PP
.Vb 4
\&    [% USE HTML %]
\&    [% HTML.escape("if (a < b && c > d) ..." %]
\&    [% HTML.attributes(border => 1, cellpadding => 2) %]
\&    [% HTML.element(table => { border => 1, cellpadding => 2 }) %]
.Ve
.PP
See Template::Plugin::HTML for further details.
.Sh "Iterator"
.IX Subsection "Iterator"
The Iterator plugin provides a way to create a Template::Iterator
object to iterate over a data set.  An iterator is created
automatically by the \s-1FOREACH\s0 directive and is aliased to the 'loop'
variable.  This plugin allows an iterator to be explicitly created
with a given name, or the default plugin name, 'iterator'.  See
Template::Plugin::Iterator for further details.
.PP
.Vb 1
\&    [% USE iterator(list, args) %]
\&
\&    [% FOREACH item = iterator %]
\&       [% '<ul>' IF iterator.first %]
\&       <li>[% item %]
\&       [% '</ul>' IF iterator.last %]
\&    [% END %]
.Ve
.Sh "Pod"
.IX Subsection "Pod"
This plugin provides an interface to the Pod::POM module
which parses \s-1POD\s0 documents into an internal object model which can
then be traversed and presented through the Template Toolkit.
.PP
.Vb 1
\&    [% USE Pod(podfile) %]
\&
\&    [% FOREACH head1 = Pod.head1;
\&         FOREACH head2 = head1/head2;
\&           ...
\&         END;
\&       END
\&    %]
.Ve
.Sh "String"
.IX Subsection "String"
The String plugin implements an object-oriented interface for 
manipulating strings.  See Template::Plugin::String for further 
details.
.PP
.Vb 2
\&    [% USE String 'Hello' %]
\&    [% String.append(' World') %]
\&
\&    [% msg = String.new('Another string') %]
\&    [% msg.replace('string', 'text') %]
\&
\&    The string "[% msg %]" is [% msg.length %] characters long.
.Ve
.Sh "Table"
.IX Subsection "Table"
The Table plugin allows you to format a list of data items into a 
virtual table by specifying a fixed number of rows or columns, with 
an optional overlap.  See Template::Plugin::Table for further 
details.
.PP
.Vb 1
\&    [% USE table(list, rows=10, overlap=1) %]
\&
\&    [% FOREACH item = table.col(3) %]
\&       [% item %]
\&    [% END %]
.Ve
.Sh "\s-1URL\s0"
.IX Subsection "URL"
The \s-1URL\s0 plugin provides a simple way of contructing URLs from a base
part and a variable set of parameters.  See Template::Plugin::URL
for further details.
.PP
.Vb 1
\&    [% USE mycgi = url('/cgi\-bin/bar.pl', debug=1) %]
\&
\&    [% mycgi %]
\&       # ==> /cgi/bin/bar.pl?debug=1
\&
\&    [% mycgi(mode='submit') %]
\&       # ==> /cgi/bin/bar.pl?mode=submit&debug=1
.Ve
.Sh "Wrap"
.IX Subsection "Wrap"
The Wrap plugin uses the Text::Wrap module by David Muir Sharnoff 
<muir@idiom.com> (with help from Tim Pierce and many many others)
to provide simple paragraph formatting.  See Template::Plugin::Wrap
and Text::Wrap for further details.
.PP
.Vb 3
\&    [% USE wrap %]
\&    [% wrap(mytext, 40, '* ', '  ') %]  # use wrap sub
\&    [% mytext FILTER wrap(40) \-%]       # or wrap FILTER
.Ve
.PP
The Text::Wrap module is available from \s-1CPAN:\s0
.PP
.Vb 1
\&    http://www.cpan.org/modules/by\-module/Text/
.Ve
.Sh "XML::Style"
.IX Subsection "XML::Style"
This plugin defines a filter for performing simple stylesheet based 
transformations of \s-1XML\s0 text.
.PP
.Vb 9
\&    [% USE xmlstyle 
\&           table = { 
\&               attributes = { 
\&                   border      = 0
\&                   cellpadding = 4
\&                   cellspacing = 1
\&               }
\&           }
\&    %]
\&
\&    [% FILTER xmlstyle %]
\&    <table>
\&    <tr>
\&      <td>Foo</td> <td>Bar</td> <td>Baz</td>
\&    </tr>
\&    </table>
\&    [% END %]
.Ve
.PP
See Template::Plugin::XML::Style for further details.
.Sh "\s-1XML\s0"
.IX Subsection "XML"
The \s-1XML::DOM\s0, \s-1XML::RSS\s0, XML::Simple and XML::XPath plugins are no
longer distributed with the Template Toolkit as of version 2.15
.PP
They are now available in a separate Template-XML distribution.
.SH "BUGS / ISSUES"
.IX Header "BUGS / ISSUES"
.IP "\(bu" 4
It might be worthwhile being able to distinguish between absolute
module names and those which should be applied relative to \s-1PLUGIN_BASE\s0
directories.  For example, use 'MyNamespace::MyModule' to denote
absolute module names (e.g. \s-1LOAD_PERL\s0), and 'MyNamespace.MyModule' to
denote relative to \s-1PLUGIN_BASE\s0.
.SH "AUTHOR"
.IX Header "AUTHOR"
Andy Wardley <abw@wardley.org>
.PP
<http://wardley.org/|http://wardley.org/>
.SH "VERSION"
.IX Header "VERSION"
2.77, distributed as part of the
Template Toolkit version 2.19, released on 27 April 2007.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 1
\&  Copyright (C) 1996\-2007 Andy Wardley.  All Rights Reserved.
.Ve
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Template, Template::Plugin, Template::Context

.\" Automatically generated by Pod::Man 2.12 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Template::Manual::Filters 3"
.TH Template::Manual::Filters 3 "2007-04-27" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Template::Manual::Filters \- Standard filters
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SH "STANDARD FILTERS"
.IX Header "STANDARD FILTERS"
.Sh "format(format)"
.IX Subsection "format(format)"
The 'format' filter takes a format string as a parameter (as per
\&\fIprintf()\fR) and formats each line of text accordingly.
.PP
.Vb 4
\&    [% FILTER format('<!\-\- %\-40s \-\->') %]
\&    This is a block of text filtered 
\&    through the above format.
\&    [% END %]
.Ve
.PP
output:
.PP
.Vb 2
\&    <!\-\- This is a block of text filtered        \-\->
\&    <!\-\- through the above format.               \-\->
.Ve
.Sh "upper"
.IX Subsection "upper"
Folds the input to \s-1UPPER\s0 \s-1CASE\s0.
.PP
.Vb 1
\&    [% "hello world" FILTER upper %]
.Ve
.PP
output:
.PP
.Vb 1
\&    HELLO WORLD
.Ve
.Sh "lower"
.IX Subsection "lower"
Folds the input to lower case.
.PP
.Vb 1
\&    [% "Hello World" FILTER lower %]
.Ve
.PP
output:
.PP
.Vb 1
\&    hello world
.Ve
.Sh "ucfirst"
.IX Subsection "ucfirst"
Folds the first character of the input to \s-1UPPER\s0 \s-1CASE\s0.
.PP
.Vb 1
\&    [% "hello" FILTER ucfirst %]
.Ve
.PP
output:
.PP
.Vb 1
\&    Hello
.Ve
.Sh "lcfirst"
.IX Subsection "lcfirst"
Folds the first character of the input to lower case.
.PP
.Vb 1
\&    [% "HELLO" FILTER lcfirst %]
.Ve
.PP
output:
.PP
.Vb 1
\&    hELLO
.Ve
.Sh "trim"
.IX Subsection "trim"
Trims any leading or trailing whitespace from the input text.  Particularly 
useful in conjunction with \s-1INCLUDE\s0, \s-1PROCESS\s0, etc., having the same effect
as the \s-1TRIM\s0 configuration option.
.PP
.Vb 1
\&    [% INCLUDE myfile | trim %]
.Ve
.Sh "collapse"
.IX Subsection "collapse"
Collapse any whitespace sequences in the input text into a single space.
Leading and trailing whitespace (which would be reduced to a single space)
is removed, as per trim.
.PP
.Vb 1
\&    [% FILTER collapse %]
\&
\&       The   cat
\&
\&       sat    on
\&
\&       the   mat
\&
\&    [% END %]
.Ve
.PP
output:
.PP
.Vb 1
\&    The cat sat on the mat
.Ve
.Sh "html"
.IX Subsection "html"
Converts the characters '<', '>', '&' and '"' to '&lt;',
\&'&gt;', '&amp;', and '&quot;' respectively, protecting them from being
interpreted as representing \s-1HTML\s0 tags or entities.
.PP
.Vb 3
\&    [% FILTER html %]
\&    Binary "<=>" returns \-1, 0, or 1 depending on...
\&    [% END %]
.Ve
.PP
output:
.PP
.Vb 1
\&    Binary "&lt;=&gt;" returns \-1, 0, or 1 depending on...
.Ve
.Sh "html_entity"
.IX Subsection "html_entity"
The html filter is fast and simple but it doesn't encode the full
range of \s-1HTML\s0 entities that your text may contain.  The html_entity
filter uses either the Apache::Util module (which is written in C and
is therefore faster) or the HTML::Entities module (written in Perl but
equally as comprehensive) to perform the encoding.  If one or other of
these modules are installed on your system then the text will be
encoded (via the \fIescape_html()\fR or \fIencode_entities()\fR subroutines
respectively) to convert all extended characters into their
appropriate \s-1HTML\s0 entities (e.g. converting 'e\*'' to '&eacute;').  If
neither module is available on your system then an 'html_entity' exception
will be thrown reporting an appropriate message.
.PP
For further information on \s-1HTML\s0 entity encoding, see
http://www.w3.org/TR/REC\-html40/sgml/entities.html.
.Sh "html_para"
.IX Subsection "html_para"
This filter formats a block of text into \s-1HTML\s0 paragraphs.  A sequence of 
two or more newlines is used as the delimiter for paragraphs which are 
then wrapped in \s-1HTML\s0 <p>...</p> tags.
.PP
.Vb 2
\&    [% FILTER html_para %]
\&    The cat sat on the mat.
\&
\&    Mary had a little lamb.
\&    [% END %]
.Ve
.PP
output:
.PP
.Vb 3
\&    <p>
\&    The cat sat on the mat.
\&    </p>
\&
\&    <p>
\&    Mary had a little lamb.
\&    </p>
.Ve
.Sh "html_break / html_para_break"
.IX Subsection "html_break / html_para_break"
Similar to the html_para filter described above, but uses the \s-1HTML\s0 tag
sequence <br><br> to join paragraphs.
.PP
.Vb 2
\&    [% FILTER html_break %]
\&    The cat sat on the mat.
\&
\&    Mary had a little lamb.
\&    [% END %]
.Ve
.PP
output:
.PP
.Vb 4
\&    The cat sat on the mat.
\&    <br>
\&    <br>
\&    Mary had a little lamb.
.Ve
.Sh "html_line_break"
.IX Subsection "html_line_break"
This filter replaces any newlines with <br> \s-1HTML\s0 tags,
thus preserving the line breaks of the original text in the 
\&\s-1HTML\s0 output.
.PP
.Vb 4
\&    [% FILTER html_line_break %]
\&    The cat sat on the mat.
\&    Mary had a little lamb.
\&    [% END %]
.Ve
.PP
output:
.PP
.Vb 2
\&    The cat sat on the mat.<br>
\&    Mary had a little lamb.<br>
.Ve
.Sh "uri"
.IX Subsection "uri"
This filter \s-1URI\s0 escapes the input text, converting any characters 
outside of the permitted \s-1URI\s0 character set (as defined by \s-1RFC\s0 2396)
into a \f(CW%nn\fR hex escape.
.PP
.Vb 1
\&    [% 'my file.html' | uri %]
.Ve
.PP
output:
.PP
.Vb 1
\&    my%20file.html
.Ve
.PP
The uri filter correctly encodes all reserved characters, including
\&\f(CW\*(C`&\*(C'\fR, \f(CW\*(C`@\*(C'\fR, \f(CW\*(C`/\*(C'\fR, \f(CW\*(C`;\*(C'\fR, \f(CW\*(C`:\*(C'\fR, \f(CW\*(C`=\*(C'\fR, \f(CW\*(C`+\*(C'\fR, \f(CW\*(C`?\*(C'\fR and \f(CW\*(C`$\*(C'\fR.  This filter
is typically used to encode parameters in a \s-1URL\s0 that could otherwise
be interpreted as part of the \s-1URL\s0.  Here's an example:
.PP
.Vb 5
\&    [% path  = 'http://tt2.org/example'
\&       back  = '/other?foo=bar&baz=bam' 
\&       title = 'Earth: "Mostly Harmless"'
\&    %]
\&    <a href="[% path %]?back=[% back | uri %]&title=[% title | uri %]">
.Ve
.PP
The output generated is rather long so we'll show it split across two
lines:
.PP
.Vb 2
\&    <a href="http://tt2.org/example?back=%2Fother%3Ffoo%3Dbar%26
\&    baz%3Dbam&title=Earth%3A%20%22Mostly%20Harmless%22">
.Ve
.PP
Without the uri filter the output would look like this (also split across
two lines).
.PP
.Vb 2
\&    <a href="http://tt2.org/example?back=/other?foo=bar
\&    &baz=bam&title=Earth: "Mostly Harmless"">
.Ve
.PP
In this rather contrived example we've manage to generate both a broken \s-1URL\s0
(the repeated \f(CW\*(C`?\*(C'\fR is not allowed) and a broken \s-1HTML\s0 element (the href
attribute is terminated by the first \f(CW\*(C`"\*(C'\fR after \f(CW\*(C`Earth: \*(C'\fR leaving \f(CW\*(C`Mostly
Harmless"\*(C'\fR dangling on the end of the tag in precisely the way that harmless
things shouldn't dangle). So don't do that. Always use the uri filter to
encode your \s-1URL\s0 parameters.
.PP
However, you should \fBnot\fR use the uri filter to encode an entire \s-1URL\s0.
.PP
.Vb 1
\&   <a href="[% page_url | uri %]">   # WRONG!
.Ve
.PP
This will incorrectly encode any reserved characters like \f(CW\*(C`:\*(C'\fR and \f(CW\*(C`/\*(C'\fR
and that's almost certainly not what you want in this case.  Instead
you should use the \fBurl\fR (note spelling) filter for this purpose.
.PP
.Vb 1
\&   <a href="[% page_url | url %]">   # CORRECT
.Ve
.PP
Please note that this behaviour was changed in version 2.16 of the 
Template Toolkit.  Prior to that, the uri filter did not encode the
reserved characters, making it technically incorrect according to the
\&\s-1RFC\s0 2396 specification.  So we fixed it in 2.16 and provided the url
filter to implement the old behaviour of not encoding reserved 
characters.
.Sh "url"
.IX Subsection "url"
The url filter is a less aggressive version of the uri filter.  It encodes
any characters outside of the permitted \s-1URI\s0 character set (as defined by \s-1RFC\s0 2396)
into \f(CW%nn\fR hex escapes.  However, unlike the uri filter, the url filter does 
\&\fBnot\fR encode the reserved characters \f(CW\*(C`&\*(C'\fR, \f(CW\*(C`@\*(C'\fR, \f(CW\*(C`/\*(C'\fR, \f(CW\*(C`;\*(C'\fR, \f(CW\*(C`:\*(C'\fR, \f(CW\*(C`=\*(C'\fR, \f(CW\*(C`+\*(C'\fR, 
\&\f(CW\*(C`?\*(C'\fR and \f(CW\*(C`$\*(C'\fR.
.Sh "indent(pad)"
.IX Subsection "indent(pad)"
Indents the text block by a fixed pad string or width.  The 'pad' argument
can be specified as a string, or as a numerical value to indicate a pad
width (spaces).  Defaults to 4 spaces if unspecified.
.PP
.Vb 4
\&    [% FILTER indent('ME> ') %]
\&    blah blah blah
\&    cabbages, rhubard, onions
\&    [% END %]
.Ve
.PP
output:
.PP
.Vb 2
\&    ME> blah blah blah
\&    ME> cabbages, rhubard, onions
.Ve
.Sh "truncate(length,dots)"
.IX Subsection "truncate(length,dots)"
Truncates the text block to the length specified, or a default length
of 32.  Truncated text will be terminated with '...' (i.e. the '...'
falls inside the required length, rather than appending to it).
.PP
.Vb 4
\&    [% FILTER truncate(21) %]
\&    I have much to say on this matter that has previously 
\&    been said on more than one occasion.
\&    [% END %]
.Ve
.PP
output:
.PP
.Vb 1
\&    I have much to say...
.Ve
.PP
If you want to use something other than '...' you can pass that as a 
second argument.
.PP
.Vb 4
\&    [% FILTER truncate(26, '&hellip;') %]
\&    I have much to say on this matter that has previously 
\&    been said on more than one occasion.
\&    [% END %]
.Ve
.PP
output:
.PP
.Vb 1
\&    I have much to say&hellip;
.Ve
.Sh "repeat(iterations)"
.IX Subsection "repeat(iterations)"
Repeats the text block for as many iterations as are specified (default: 1).
.PP
.Vb 4
\&    [% FILTER repeat(3) %]
\&    We want more beer and we want more beer,
\&    [% END %]
\&    We are the more beer wanters!
.Ve
.PP
output:
.PP
.Vb 4
\&    We want more beer and we want more beer,
\&    We want more beer and we want more beer,
\&    We want more beer and we want more beer,
\&    We are the more beer wanters!
.Ve
.Sh "remove(string)"
.IX Subsection "remove(string)"
Searches the input text for any occurrences of the specified string and 
removes them.  A Perl regular expression may be specified as the search 
string.
.PP
.Vb 1
\&    [% "The  cat  sat  on  the  mat" FILTER remove('\es+') %]
.Ve
.PP
output:
.PP
.Vb 1
\&    Thecatsatonthemat
.Ve
.Sh "replace(search, replace)"
.IX Subsection "replace(search, replace)"
Similar to the remove filter described above, but taking a second parameter
which is used as a replacement string for instances of the search string.
.PP
.Vb 1
\&    [% "The  cat  sat  on  the  mat" | replace('\es+', '_') %]
.Ve
.PP
output:
.PP
.Vb 1
\&    The_cat_sat_on_the_mat
.Ve
.Sh "redirect(file, options)"
.IX Subsection "redirect(file, options)"
The 'redirect' filter redirects the output of the block into a separate
file, specified relative to the \s-1OUTPUT_PATH\s0 configuration item.
.PP
.Vb 5
\&    [% FOREACH user = myorg.userlist %]
\&       [% FILTER redirect("users/${user.id}.html") %]
\&          [% INCLUDE userinfo %]
\&       [% END %]
\&    [% END %]
.Ve
.PP
or more succinctly, using side-effect notation:
.PP
.Vb 4
\&    [% INCLUDE userinfo 
\&         FILTER redirect("users/${user.id}.html")
\&           FOREACH user = myorg.userlist 
\&    %]
.Ve
.PP
A 'file' exception will be thrown if the \s-1OUTPUT_PATH\s0 option is undefined.
.PP
An optional 'binmode' argument can follow the filename to explicitly set
the output file to binary mode.
.PP
.Vb 2
\&    [% PROCESS my/png/generator 
\&         FILTER redirect("images/logo.png", binmode=1) %]
.Ve
.PP
For backwards compatibility with earlier versions, a single true/false
value can be used to set binary mode.
.PP
.Vb 2
\&    [% PROCESS my/png/generator 
\&         FILTER redirect("images/logo.png", 1) %]
.Ve
.PP
For the sake of future compatibility and clarity, if nothing else, we
would strongly recommend you explicitly use the named 'binmode' option
as shown in the first example.
.Sh "eval / evaltt"
.IX Subsection "eval / evaltt"
The 'eval' filter evaluates the block as template text, processing
any directives embedded within it.  This allows template variables to
contain template fragments, or for some method to be provided for
returning template fragments from an external source such as a
database, which can then be processed in the template as required.
.PP
.Vb 4
\&    my $vars  = {
\&        fragment => "The cat sat on the [% place %]",
\&    };
\&    $template\->process($file, $vars);
.Ve
.PP
The following example:
.PP
.Vb 1
\&    [% fragment | eval %]
.Ve
.PP
is therefore equivalent to
.PP
.Vb 1
\&    The cat sat on the [% place %]
.Ve
.PP
The 'evaltt' filter is provided as an alias for 'eval'.
.Sh "perl / evalperl"
.IX Subsection "perl / evalperl"
The 'perl' filter evaluates the block as Perl code.  The \s-1EVAL_PERL\s0
option must be set to a true value or a 'perl' exception will be
thrown.
.PP
.Vb 1
\&    [% my_perl_code | perl %]
.Ve
.PP
In most cases, the [% \s-1PERL\s0 %] ... [% \s-1END\s0 %] block should suffice for 
evaluating Perl code, given that template directives are processed 
before being evaluate as Perl.  Thus, the previous example could have
been written in the more verbose form:
.PP
.Vb 3
\&    [% PERL %]
\&    [% my_perl_code %]
\&    [% END %]
.Ve
.PP
as well as
.PP
.Vb 3
\&    [% FILTER perl %]
\&    [% my_perl_code %]
\&    [% END %]
.Ve
.PP
The 'evalperl' filter is provided as an alias for 'perl' for backwards
compatibility.
.Sh "stdout(options)"
.IX Subsection "stdout(options)"
The stdout filter prints the output generated by the enclosing block to
\&\s-1STDOUT\s0.  The 'binmode' option can be passed as either a named parameter
or a single argument to set \s-1STDOUT\s0 to binary mode (see the
binmode perl function).
.PP
.Vb 2
\&    [% PROCESS something/cool
\&           FILTER stdout(binmode=1) # recommended %]
\&
\&    [% PROCESS something/cool
\&           FILTER stdout(1)         # alternate %]
.Ve
.PP
The stdout filter can be used to force binmode on \s-1STDOUT\s0, or also inside
redirect, null or stderr blocks to make sure that particular output goes
to stdout. See the null filter below for an example.
.Sh "stderr"
.IX Subsection "stderr"
The stderr filter prints the output generated by the enclosing block to
\&\s-1STDERR\s0.
.Sh "null"
.IX Subsection "null"
The null filter prints nothing.  This is useful for plugins whose
methods return values that you don't want to appear in the output.
Rather than assigning every plugin method call to a dummy variable
to silence it, you can wrap the block in a null filter:
.PP
.Vb 10
\&    [% FILTER null;
\&        USE im = GD.Image(100,100);
\&        black = im.colorAllocate(0,   0, 0);
\&        red   = im.colorAllocate(255,0,  0);
\&        blue  = im.colorAllocate(0,  0,  255);
\&        im.arc(50,50,95,75,0,360,blue);
\&        im.fill(50,50,red);
\&        im.png | stdout(1);
\&       END;
\&    \-%]
.Ve
.PP
Notice the use of the stdout filter to ensure that a particular expression
generates output to stdout (in this case in binary mode).
.Sh "latex(outputType)"
.IX Subsection "latex(outputType)"
The \fIlatex()\fR filter is no longer part of the core Template Toolkit
distribution as of version 2.15.  You can download it as a 
separate Template-Latex distribution from \s-1CPAN\s0.
.SH "AUTHOR"
.IX Header "AUTHOR"
Andy Wardley <abw@wardley.org>
.PP
<http://wardley.org/|http://wardley.org/>
.SH "VERSION"
.IX Header "VERSION"
Template Toolkit version 2.19, released on 27 April 2007.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 1
\&  Copyright (C) 1996\-2007 Andy Wardley.  All Rights Reserved.
.Ve
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

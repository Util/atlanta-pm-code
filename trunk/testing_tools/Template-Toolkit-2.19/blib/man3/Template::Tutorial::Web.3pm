.\" Automatically generated by Pod::Man 2.12 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Template::Tutorial::Web 3"
.TH Template::Tutorial::Web 3 "2007-04-27" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Template::Tutorial::Web \- Generating Web Content Using the Template Toolkit
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This tutorial document provides a introduction to the Template Toolkit
and demonstrates some of the typical ways it may be used for
generating web content.  It covers the generation of static pages from
templates using the tpage and 
ttree scripts and then goes on to
show dynamic content generation using \s-1CGI\s0 scripts and Apache/mod_perl
handlers.
.PP
Various features of the Template Toolkit are introduced and described 
briefly and explained by use of example.  For further information,
see Template, Template::Manual and the various sections within
it.  e.g.
.PP
.Vb 3
\&    perldoc Template                    # Template.pm module usage
\&    perldoc Template::Manual            # index to manual
\&    perldoc Template::Manual::Config    # e.g. configuration options
.Ve
.PP
The documentation is now also distributed in \s-1HTML\s0 format (or rather,
in the form of \s-1HTML\s0 templates).  See the 'docs' sub-directory of the 
distribution for further information on building the \s-1HTML\s0 documentation.
.PP
If you're already reading this as part of the \s-1HTML\s0 documentation, then
you don't need to worry about all that.  You can have a seat, sit back.
 back and enjoy the rest of the tutorial...
.SH "INTRODUCTION"
.IX Header "INTRODUCTION"
The Template Toolkit is a set of Perl modules which collectively
implement a template processing system.  In this context, a template
is a text document containing special markup tags called 'directives'.
A directive is an instruction for the template processor to perform
some action and substitute the result into the document in place of
the original directive.  Directives include those to define or insert
a variable value, iterate through a list of values (\s-1FOREACH\s0), declare
a conditional block (\s-1IF/UNLESS/ELSE\s0), include and process another template
file (\s-1INCLUDE\s0) and so on.
.PP
In all other respects, the document is a plain text file and may
contain any other content (e.g. \s-1HTML\s0, \s-1XML\s0, \s-1RTF\s0, LaTeX, etc).  Directives
are inserted in the document within the special markup tags which are
\&'[%' and '%]' by default, but can be changed via the module
configuration options.  Here's an example of an \s-1HTML\s0 document with
additional Template Toolkit directives.
.PP
.Vb 3
\&   [% INCLUDE header
\&      title = 'This is an HTML example'
\&   %]
\&
\&   <h1>Some Interesting Links</h1>
\&
\&   [% webpages = [
\&         { url => 'http://foo.org', title => 'The Foo Organisation' }
\&         { url => 'http://bar.org', title => 'The Bar Organisation' }
\&      ]
\&   %]
\&
\&   Links:
\&   <ul>
\&   [% FOREACH link = webpages %]
\&      <li><a href="[% link.url %]">[% link.title %]</a>
\&   [% END %]
\&   </ul>
\&
\&   [% INCLUDE footer %]
.Ve
.PP
This example shows how the \s-1INCLUDE\s0 directive is used to load and process 
separate 'header' and 'footer' template files, including the output in 
the current document.  These files might look like this:
.PP
header:
.PP
.Vb 4
\&    <html>
\&    <head>
\&    <title>[% title %]</title>
\&    </head>
\&    
\&    <body bgcolor="#ffffff">
.Ve
.PP
footer:
.PP
.Vb 1
\&    <hr>
\&
\&    <center>
\&    &copy; Copyright 2000 Me, Myself, I
\&    </center>
\&
\&    </body>
\&    </html>
.Ve
.PP
The example also uses the \s-1FOREACH\s0 directive to iterate through the 
\&'webpages' list to build a table of links.  In this example, we have
defined this list within the template to contain a number of hash references,
each containing a 'url' and 'title' member.  The \s-1FOREACH\s0 directive 
iterates through the list, aliasing 'link' to each item (hash ref).
The \fB[% link.url %]\fR and \fB[% link.title %]\fR directives then access
the individual values in the hash and insert them into the document.
.PP
The following sections show other ways in which data can be defined for
use in a template.
.SH "GENERATING STATIC PAGES"
.IX Header "GENERATING STATIC PAGES"
Having created a template file we can now process it to generate some
real output.  The quickest and easiest way to do this is to use the 
\&\fItpage\fR script.  This is provided as part of the Template Toolkit and
should be installed in your usual Perl bin directory.
.PP
Assuming you saved your template file as 'mypage.html', you would run
the command:
.PP
.Vb 1
\&    tpage mypage.html
.Ve
.PP
This will process the template file, sending the output to \s-1STDOUT\s0
(i.e.  whizzing past you on the screen).  You may want to redirect the
output to a file but be careful not to specify the same name as the
template file, or you'll overwrite it.  You may want to use one prefix
for your templates such as '.atml' (for 'Another Template Markup
Language', perhaps?) and the regular '.html' for the output files
(assuming you're creating \s-1HTML\s0, that is).  Alternatively, you might
redirect the output to another directory. e.g.
.PP
.Vb 2
\&    tpage mypage.atml > mypage.html
\&    tpage templates/mypage.html > html/mypage.html
.Ve
.PP
The \fBtpage\fR script is very basic and only really intended to give you
an easy way to process a template without having to write any Perl code.
A much more flexible tool is \fBttree\fR, described below, but for now let's
look at the output generated by processing the above example (some 
whitespace removed for brevity):
.PP
.Vb 4
\&    <html>
\&    <head>
\&    <title>This is an HTML example</title>
\&    </head>
\&    
\&    <body bgcolor="#ffffff">
\&    
\&    <h1>Some Interesting Links</h1>
\&    
\&    Links:
\&    <ul>
\&       <li><a href="http://foo.org">The Foo Organsiation</a>
\&       <li><a href="http://bar.org">The Bar Organsiation</a>
\&    </ul>
\&    
\&    <hr>
\&    
\&    <center>
\&    &copy; Copyright 2000 Me, Myself, I
\&    </center>
\&    
\&    </body>
\&    </html>
.Ve
.PP
The \fIheader\fR and \fIfooter\fR template files have been included (assuming
you created them and they're in the current directory) and the link data 
has been built into an \s-1HTML\s0 list.
.PP
The \fIttree\fR script, also distributed as part of the Template Toolkit,
provides a more flexible way to process template documents.  The first
time you run the script, it will ask you if it should create a
configuration file, usually called '.ttreerc' in your home directory.
Answer 'y' to have it create the file.
.PP
The \fIttree\fR documentation describes how you can change the location
of this file and also explains the syntax and meaning of the various
options in the file.  Comments are written to the sample configuration
file which should also help.
.PP
.Vb 2
\&    perldoc ttree
\&    ttree \-h
.Ve
.PP
In brief, the configuration file describes the directories in which
template files are to be found (src), where the corresponding output
should be written to (dest), and any other directories (lib) that may
contain template files that you plan to \s-1INCLUDE\s0 into your source
documents.  You can also specify processing options (such as 'verbose'
and 'recurse') and provide regular expression to match files that you
don't want to process (ignore, accept) or should be copied instead of
processed (copy).
.PP
An example \fI.ttreerc\fR file is shown here:
.PP
\&\f(CW$HOME\fR/.ttreerc:
    verbose 
    recurse
.PP
.Vb 2
\&    # this is where I keep other ttree config files
\&    cfg = ~/.ttree
\&
\&    src  = ~/websrc/src
\&    lib  = ~/websrc/lib
\&    dest = ~/public_html/test
\&
\&    ignore = \eb(CVS|RCS)\eb
\&    ignore = ^#
.Ve
.PP
You can create many different configuration files and store them
in the directory specified in the 'cfg' option, shown above.  You then
add the \f(CW\*(C`\-f filename\*(C'\fR option to \fIttree\fR to have it read that file.
.PP
When you run the script, it compares all the files in the 'src' directory
(including those in sub-directories if the 'recurse' option is set), with
those in the 'dest' directory.  If the destination file doesn't exist or
has an earlier modification time than the corresponding source file, then 
the source will be processed with the output written to the destination 
file.  The \f(CW\*(C`\-a\*(C'\fR option forces all files to be processed, regardless of 
modification times.
.PP
The script \fIdoesn't\fR process any of the files in the 'lib' directory,
but it does add it to the \s-1INCLUDE_PATH\s0 for the template processor so
that it can locate these files via an \s-1INCLUDE\s0 or \s-1PROCESS\s0 directive.
Thus, the 'lib' directory is an excellent place to keep template elements
such as header, footers, etc., that aren't complete documents in their
own right.
.PP
You can also specify various Template Toolkit options from the configuration
file.  Consult the \fBttree\fR documentation and help summary (\f(CW\*(C`ttree \-h\*(C'\fR)
for full details.  e.g.
.PP
\&\f(CW$HOME\fR/.ttreerc:
    pre_process = config
    interpolate
    post_chomp
.PP
The 'pre_process' option allows you to specify a template file which
should be processed before each file.  Unsurprisingly, there's also a
\&'post_process' option to add a template after each file.  In the
fragment above, we have specified that the 'config' template should be
used as a prefix template.  We can create this file in the 'lib'
directory and use it to define some common variables, including those
web page links we defined earlier and might want to re-use in other
templates.  We could also include an \s-1HTML\s0 header, title, or menu bar
in this file which would then be prepended to each and every template
file, but for now we'll keep all that in a separate 'header' file.
.PP
\&\f(CW$lib\fR/config:
.PP
.Vb 10
\&    [% root     = '~/abw'
\&       home     = "$root/index.html"
\&       images   = "$root/images"
\&       email    = 'abw@wardley.org'
\&       graphics = 1
\&       webpages = [
\&         { url => 'http://foo.org', title => 'The Foo Organsiation' }
\&         { url => 'http://bar.org', title => 'The Bar Organsiation' }
\&       ]
\&    %]
.Ve
.PP
Assuming you've created or copied the 'header' and 'footer' files from the 
earlier example into your 'lib' directory, you can now start to create 
web pages like the following in your 'src' directory and process them 
with \fIttree\fR.
.PP
\&\f(CW$src\fR/newpage.html:
.PP
.Vb 3
\&    [% INCLUDE header
\&       title = 'Another Template Toolkit Test Page'
\&    %]
\&
\&    <a href="[% home %]">Home</a>
\&    <a href="mailto:[% email %]">Email</a>
\&
\&    [% IF graphics %]
\&    <img src="[% images %]/logo.gif" align=right width=60 height=40>
\&    [% END %]
\&
\&    [% INCLUDE footer %]
.Ve
.PP
Here we've shown how pre-defined variables can be used as flags to
enable certain feature (e.g. 'graphics') and to specify common items
such as an email address and \s-1URL\s0's for the home page, images directory
and so on.  This approach allows you to define these values once so
that they're consistent across all pages and can easily be changed to 
new values.
.PP
When you run \fBttree\fR, you should see output similar to the following
(assuming you have the verbose flag set).
.PP
.Vb 1
\&  ttree 1.14 (Template Toolkit version 1.02a)
\&
\&        Source: /home/abw/websrc/src
\&   Destination: /home/abw/public_html/test
\&  Include Path: [ /home/abw/websrc/lib ]
\&        Ignore: [ \eb(CVS|RCS)\eb, ^# ]
\&          Copy: [  ]
\&        Accept: [ * ]
\&
\&    + newpage.html
.Ve
.PP
The '+' before 'newpage.html' shows that the file was processed, with
the output being written to the destination directory.  If you run the
same command again, you'll see the following line displayed instead
showing a '\-' and giving a reason why the file wasn't processed.
.PP
.Vb 1
\&    \- newpage.html                     (not modified)
.Ve
.PP
It has detected a 'newpage.html' in the destination directory which is
more recent than that in the source directory and so hasn't bothered
to waste time re-processing it.  To force all files to be processed,
use the \f(CW\*(C`\-a\*(C'\fR option.  You can also specify one or more filenames as
command line arguments to \fIttree\fR:
.PP
.Vb 1
\&    tpage newpage.html
.Ve
.PP
This is what the destination page looks like.
.PP
\&\f(CW$dest\fR/newpage.html:
.PP
.Vb 4
\&    <html>
\&    <head>
\&    <title>Another Template Toolkit Test Page</title>
\&    </head>
\&    
\&    <body bgcolor="#ffffff">
\&        
\&    <a href="~/abw/index.html">Home</a>
\&    <a href="mailto:abw@wardley.org">Email me</a>
\&
\&    <img src="~/abw/images/logo.gif" align=right width=60 height=40>
\&        
\&    <hr>
\&    
\&    <center>
\&    &copy; Copyright 2000 Me, Myself, I
\&    </center>
\&    
\&    </body>
\&    </html>
.Ve
.PP
You can add as many documents as you like to the 'src' directory and
\&\fIttree\fR will apply the same process to them all.  In this way, it is
possible to build an entire tree of static content for a web site with
a single command.  The added benefit is that you can be assured of
consistency in links, header style, or whatever else you choose to
implement in terms of common templates elements or variables.
.SH "DYNAMIC CONTENT GENERATION VIA CGI SCRIPT"
.IX Header "DYNAMIC CONTENT GENERATION VIA CGI SCRIPT"
The Template module provides a simple front-end to the Template 
Toolkit for use in \s-1CGI\s0 scripts and Apache/mod_perl handlers.  Simply
\&'use' the Template module, create an object instance with the \fInew()\fR
method and then call the \fIprocess()\fR method on the object, passing the
name of the template file as a parameter.  The second parameter passed
is a reference to a hash array of variables that we want made available
to the template:
.PP
.Vb 1
\&    #!/usr/bin/perl \-w
\&
\&    use strict;
\&    use Template;
\&
\&    my $file = 'src/greeting.html';
\&    my $vars = {
\&       message  => "Hello World\en"
\&    };
\&
\&    my $template = Template\->new();
\&
\&    $template\->process($file, $vars)
\&        || die "Template process failed: ", $template\->error(), "\en";
.Ve
.PP
So that our scripts will work with the same template files as our earlier
examples, we'll can add some configuration options to the constructor to 
tell it about our environment:
.PP
.Vb 6
\&    my $template\->new({
\&        # where to find template files
\&        INCLUDE_PATH => '/home/abw/websrc/src:/home/abw/websrc/lib',
\&        # pre\-process lib/config to define any extra values
\&        PRE_PROCESS  => 'config',
\&    });
.Ve
.PP
Note that here we specify the 'config' file as a \s-1PRE_PROCESS\s0 option.
This means that the templates we process can use the same global
variables defined earlier for our static pages.  We don't have to
replicate their definitions in this script.  However, we can supply
additional data and functionality specific to this script via the hash
of variables that we pass to the \fIprocess()\fR method.
.PP
These entries in this hash may contain simple text or other values,
references to lists, others hashes, sub-routines or objects.  The Template
Toolkit will automatically apply the correct procedure to access these 
different types when you use the variables in a template.
.PP
Here's a more detailed example to look over.  Amongst the different
template variables we define in \f(CW$vars\fR, we create a reference to a
\&\s-1CGI\s0 object and a 'get_user_projects' sub-routine.
.PP
.Vb 1
\&    #!/usr/bin/perl \-w
\&
\&    use strict;
\&    use Template;
\&    use CGI;
\&
\&    $| = 1;
\&    print "Content\-type: text/html\en\en";
\&
\&    my $file = 'userinfo.html';
\&    my $vars = {
\&        'version'  => 3.14,
\&        'days'     => [ qw( mon tue wed thu fri sat sun ) ],
\&        'worklist' => \e&get_user_projects,
\&        'cgi'      => CGI\->new(),
\&        'me'       => {
\&            'id'     => 'abw',
\&            'name'   => 'Andy Wardley',
\&        },
\&    };
\&
\&    sub get_user_projects {
\&        my $user = shift;
\&        my @projects = ...   # do something to retrieve data
\&        return \e@projects;
\&    }
\&
\&    my $template = Template\->new({
\&        INCLUDE_PATH => '/home/abw/websrc/src:/home/abw/websrc/lib',
\&        PRE_PROCESS  => 'config',
\&    });
\&
\&    $template\->process($file, $vars)
\&        || die $template\->error();
.Ve
.PP
Here's a sample template file that we might create to build the output
for this script.
.PP
\&\f(CW$src\fR/userinfo.html:
.PP
.Vb 3
\&    [% INCLUDE header
\&       title = 'Template Toolkit CGI Test'
\&    %]
\&
\&    <a href="mailto:[% email %]">Email [% me.name %]</a>
\&
\&    <p>This is version [% version %]</p>
\&
\&    <h3>Projects</h3>
\&    <ul>
\&    [% FOREACH project = worklist(me.id) %]
\&       <li> <a href="[% project.url %]">[% project.name %]</a>
\&    [% END %]
\&    </ul>
\&
\&    [% INCLUDE footer %]
.Ve
.PP
This example shows how we've separated the Perl implementation (code) from 
the presentation (\s-1HTML\s0) which not only makes them easier to maintain in 
isolation, but also allows the re-use of existing template elements
such as headers and footers, etc.  By using template to create the 
output of your \s-1CGI\s0 scripts, you can give them the same consistency 
as your static pages built via ttree or 
other means.
.PP
Furthermore, we can modify our script so that it processes any one of a
number of different templates based on some condition.  A \s-1CGI\s0 script to
maintain a user database, for example, might process one template to
provide an empty form for new users, the same form with some default 
values set for updating an existing user record, a third template for
listing all users in the system, and so on.  You can use any Perl 
functionality you care to write to implement the logic of your 
application and then choose one or other template to generate the 
desired output for the application state.
.SH "DYNAMIC CONTENT GENERATION VIA APACHE/MOD_PERL HANDLER"
.IX Header "DYNAMIC CONTENT GENERATION VIA APACHE/MOD_PERL HANDLER"
\&\fB\s-1NOTE:\s0\fR the Apache::Template module is now available from \s-1CPAN\s0
and provides a simple and easy to use Apache/mod_perl interface to the
Template Toolkit.  It's only in it's first release (0.01) at the time
of writing and it currently only offers a fairly basic facility, but
it implements most, if not all of what is described below, and it
avoids the need to write your own handler.  However, in many cases,
you'll want to write your own handler to customise processing for your
own need, and this section will show you how to get started.
.PP
The Template module can be used in a similar way from an Apache/mod_perl
handler.  Here's an example of a typical Apache \fIhttpd.conf\fR file:
.PP
.Vb 3
\&    PerlModule CGI;
\&    PerlModule Template
\&    PerlModule MyOrg::Apache::User
\&
\&    PerlSetVar websrc_root   /home/abw/websrc
\&
\&    <Location /user/bin>
\&        SetHandler     perl\-script
\&        PerlHandler    MyOrg::Apache::User
\&    </Location>
.Ve
.PP
This defines a location called '/user/bin' to which all requests will
be forwarded to the \fIhandler()\fR method of the MyOrg::Apache::User
module.  That module might look something like this:
.PP
.Vb 1
\&    package MyOrg::Apache::User;
\&    
\&    use strict;
\&    use vars qw( $VERSION );
\&    use Apache::Constants qw( :common );
\&    use Template qw( :template );
\&    use CGI;
\&    
\&    $VERSION = 1.59;
\&    
\&    sub handler {
\&        my $r = shift;
\&
\&        my $websrc = $r\->dir_config('websrc_root')
\&            or return fail($r, SERVER_ERROR,
\&                           "'websrc_root' not specified");
\&
\&        my $template = Template\->new({ 
\&            INCLUDE_PATH  => "$websrc/src/user:$websrc/lib",
\&            PRE_PROCESS   => 'config',
\&            OUTPUT        => $r,     # direct output to Apache request
\&        });
\&    
\&        my $params = {
\&            uri     => $r\->uri,
\&            cgi     => CGI\->new,
\&        };
\&    
\&        # use the path_info to determine which template file to process
\&        my $file = $r\->path_info;
\&        $file =~ s[^/][];
\&    
\&        $r\->content_type('text/html');
\&        $r\->send_http_header;
\&        
\&        $template\->process($file, $params) 
\&            || return fail($r, SERVER_ERROR, $template\->error());
\&    
\&        return OK;
\&    }
\&    
\&    sub fail {
\&        my ($r, $status, $message) = @_;
\&        $r\->log_reason($message, $r\->filename);
\&        return $status;
\&    }
.Ve
.PP
The handler accepts the request and uses it to determine the 'websrc_root'
value from the config file.  This is then used to define an \s-1INCLUDE_PATH\s0
for a new Template object.  The \s-1URI\s0 is extracted from the request and a 
\&\s-1CGI\s0 object is created.  These are both defined as template variables.
.PP
The name of the template file itself is taken from the \s-1PATH_INFO\s0 element
of the request.  In this case, it would comprise the part of the \s-1URL\s0 
coming after '/user/bin',  e.g for '/user/bin/edit', the template file
would be 'edit' located in \*(L"$websrc/src/user\*(R".  The headers are sent 
and the template file is processed.  All output is sent directly to the
\&\fIprint()\fR method of the Apache request object.
.SH "USING PLUGINS TO EXTEND FUNCTIONALITY"
.IX Header "USING PLUGINS TO EXTEND FUNCTIONALITY"
As we've already shown, it is possible to bind Perl data and functions
to template variables when creating dynamic content via a \s-1CGI\s0 script
or Apache/mod_perl process.  The Template Toolkit also supports a
plugin interface which allows you define such additional data and/or
functionality in a separate module and then load and use it as
required with the \s-1USE\s0 directive.
.PP
The main benefit to this approach is that you can load the extension into
any template document, even those that are processed \*(L"statically\*(R" by 
\&\fItpage\fR or \fIttree\fR.  You \fIdon't\fR need to write a Perl wrapper to 
explicitly load the module and make it available via the stash.
.PP
Let's demonstrate this principle using the \s-1DBI\s0 plugin written by Simon
Matthews <sam@knowledgepool.com>.  You can create this
template in your 'src' directory and process it using \fIttree\fR to see
the results.  Of course, this example relies on the existence of the
appropriate \s-1SQL\s0 database but you should be able to adapt it to your
own resources, or at least use it as a demonstrative example of what's
possible.
.PP
.Vb 3
\&    [% INCLUDE header
\&       title = 'User Info'
\&    %]
\&    
\&    [% USE DBI('dbi:mSQL:mydbname') %]
\&    
\&    <table border=0 width="100%">
\&    <tr>
\&      <th>User ID</th> 
\&      <th>Name</th>  
\&      <th>Email</th>
\&    </tr>
\&    
\&    [% FOREACH user = DBI.query('SELECT * FROM user ORDER BY id') %]
\&    <tr>
\&      <td>[% user.id %]</td> 
\&      <td>[% user.name %]</td> 
\&      <td>[% user.email %]</td>
\&    </tr>
\&    [% END %]
\&    
\&    </table>
\&    
\&    [% INCLUDE footer %]
.Ve
.PP
A plugin is simply a Perl module in a known location and conforming to 
a known standard such that the Template Toolkit can find and load it 
automatically.  You can create your own plugin by inheriting from the 
\&\fITemplate::Plugin\fR module.
.PP
Here's an example which defines some data items ('foo' and 'people')
and also an object method ('bar').  We'll call the plugin 'FooBar' for
want of a better name and create it in the 'MyOrg::Template::Plugin::FooBar'
package.  We've added a 'MyOrg' to the regular 'Template::Plugin::*' package
to avoid any conflict with existing plugins.
.PP
You can create a module stub using the Perl utlity \fIh2xs\fR:
.PP
.Vb 1
\&    h2xs \-A \-X \-n MyOrg::Template::Plugin::FooBar
.Ve
.PP
This will create a directory structure representing the package name
along with a set of files comprising your new module.  You can then 
edit FooBar.pm to look something like this:
.PP
.Vb 1
\&    package MyOrg::Template::Plugin::FooBar;
\&
\&    use Template::Plugin;
\&    use vars qw( $VERSION );
\&    use base qw( Template::Plugin );
\&
\&    $VERSION = 1.23;
\&
\&    sub new {
\&        my ($class, $context, @params) = @_;
\&
\&        bless {
\&            _CONTEXT => $context,
\&            foo      => 25,
\&            people   => [ 'tom', 'dick', 'harry' ],
\&        }, $class;
\&    }
\&
\&    sub bar {
\&        my ($self, @params) = @_;
\&        # ...do something...    
\&        return $some_value;
\&    }
.Ve
.PP
The plugin constructor \fInew()\fR receives the class name as the first
parameter, as is usual in Perl, followed by a reference to something
called a Template::Context object.  You don't need to worry too much
about this at the moment, other than to know that it's the main
processing object for the Template Toolkit.  It provides access to the
functionality of the processor and some plugins may need to
communicate with it.  We don't at this stage, but we'll save the
reference anyway in the '_CONTEXT' member.  The leading underscore is
a convention which indicates that this item is private and the
Template Toolkit won't attempt to access this member.  The other
members defined, 'foo' and 'people' are regular data items which will be
made available to templates using this plugin.  Following the context
reference are passed any additional parameters specified with the 
\&\s-1USE\s0 directive, such as the data source parameter, 'dbi:mSQL:mydbname', 
that we used in the earlier \s-1DBI\s0 example.
.PP
If you used \fIh2xs\fR to create the module stub then you'll already 
have a Makefile.PL and you can incite the familiar incantation to 
build and install it.  Don't forget to add some tests to test.pl!
.PP
.Vb 4
\&    perl Makefile.PL
\&    make
\&    make test
\&    make install
.Ve
.PP
If you don't or can't install it to the regular place for your Perl 
modules (perhaps because you don't have the required privileges) then
you can set the \s-1PERL5LIB\s0 environment variable to specify another location.
If you're using \fIttree\fR then you can add the following line to your 
configuration file instead.  This has the effect of add '/path/to/modules' 
to the \f(CW@INC\fR array to a similar end.
.PP
\&\f(CW$HOME\fR/.ttreerc:
.PP
.Vb 1
\&    perl5lib = /path/to/modules
.Ve
.PP
One further configuration item must be added to inform the toolkit of
the new package name we have adopted for our plugins:
.PP
\&\f(CW$HOME\fR/.ttreerc:
.PP
.Vb 1
\&    plugin_base = 'MyOrg::Template::Plugin'
.Ve
.PP
If you're writing Perl code to control the Template modules directly,
then this value can be passed as a configuration parameter when you 
create the module.
.PP
.Vb 1
\&    use Template;
\&
\&    my $template = Template\->new({ 
\&        PLUGIN_BASE => 'MyOrg::Template::Plugin' 
\&    });
.Ve
.PP
Now we can create a template which uses this plugin:
.PP
.Vb 3
\&    [% INCLUDE header
\&       title = 'FooBar Plugin Test'
\&    %]
\&
\&    [% USE FooBar %]
\&
\&    Some values available from this plugin:
\&      [% FooBar.foo %] [% FooBar.bar %]
\&
\&    The users defined in the 'people' list:
\&    [% FOREACH uid = FooBar.people %]
\&      * [% uid %]
\&    [% END %]
\&
\&    [% INCLUDE footer %]
.Ve
.PP
The 'foo', 'bar' and 'people' items of the FooBar plugin are
automatically resolved to the appropriate data items or method calls
on the underlying object.
.PP
Using this approach, it is possible to create application
functionality in a single module which can then be loaded and used on
demand in any template.  The simple interface between template
directives and plugin objects allows complex, dynamic content to be
built from a few simple template documents without knowing anything
about the underlying implementation.
.SH "AUTHOR"
.IX Header "AUTHOR"
Andy Wardley <abw@wardley.org>
.PP
<http://wardley.org/|http://wardley.org/>
.SH "VERSION"
.IX Header "VERSION"
Template Toolkit version 2.19, released on 27 April 2007.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 1
\&  Copyright (C) 1996\-2007 Andy Wardley.  All Rights Reserved.
.Ve
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

.\" Automatically generated by Pod::Man 2.12 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Template 3"
.TH Template 3 "2007-04-27" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Template \- Front\-end module to the Template Toolkit
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Template;
\&
\&  # some useful options (see below for full list)
\&  my $config = {
\&      INCLUDE_PATH => '/search/path',  # or list ref
\&      INTERPOLATE  => 1,               # expand "$var" in plain text
\&      POST_CHOMP   => 1,               # cleanup whitespace 
\&      PRE_PROCESS  => 'header',        # prefix each template
\&      EVAL_PERL    => 1,               # evaluate Perl code blocks
\&  };
\&
\&  # create Template object
\&  my $template = Template\->new($config);
\&
\&  # define template variables for replacement
\&  my $vars = {
\&      var1  => $value,
\&      var2  => \e%hash,
\&      var3  => \e@list,
\&      var4  => \e&code,
\&      var5  => $object,
\&  };
\&
\&  # specify input filename, or file handle, text reference, etc.
\&  my $input = 'myfile.html';
\&
\&  # process input template, substituting variables
\&  $template\->process($input, $vars)
\&      || die $template\->error();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This documentation describes the Template module which is the direct
Perl interface into the Template Toolkit.  It covers the use of the
module and gives a brief summary of configuration options and template
directives.  Please see Template::Manual for the complete reference
manual which goes into much greater depth about the features and use
of the Template Toolkit.  The Template::Tutorial is also available
as an introductory guide to using the Template Toolkit.
.SH "METHODS"
.IX Header "METHODS"
.Sh "new(\e%config)"
.IX Subsection "new(%config)"
The \fInew()\fR constructor method (implemented by the Template::Base base
class) instantiates a new Template object.  A reference to a hash
array of configuration items may be passed as a parameter.
.PP
.Vb 4
\&    my $tt = Template\->new({
\&        INCLUDE_PATH => '/usr/local/templates',
\&            EVAL_PERL    => 1,
\&    }) || die $Template::ERROR, "\en";
.Ve
.PP
A reference to a new Template object is returned, or undef on error.
In the latter case, the error message can be retrieved by calling
\&\fIerror()\fR as a class method (e.g. \f(CW\*(C`Template\->error()\*(C'\fR) or by
examining the \f(CW$ERROR\fR package variable directly
(e.g. \f(CW$Template::ERROR\fR).
.PP
.Vb 2
\&    my $tt = Template\->new(\e%config)
\&        || die Template\->error(), "\en";
\&
\&    my $tt = Template\->new(\e%config)
\&        || die $Template::ERROR, "\en";
.Ve
.PP
For convenience, configuration items may also be specified as a list
of items instead of a hash array reference.  These are automatically
folded into a hash array by the constructor.
.PP
.Vb 2
\&    my $tt = Template\->new(INCLUDE_PATH => '/tmp', POST_CHOMP => 1)
\&        || die $Template::ERROR, "\en";
.Ve
.ie n .Sh "process($template, \e%vars, $output\fP, \f(CW%options)"
.el .Sh "process($template, \e%vars, \f(CW$output\fP, \f(CW%options\fP)"
.IX Subsection "process($template, %vars, $output, %options)"
The \fIprocess()\fR method is called to process a template.  The first
parameter indicates the input template as one of: a filename relative
to \s-1INCLUDE_PATH\s0, if defined; a reference to a text string containing
the template text; or a file handle reference (e.g. IO::Handle or
sub-class) or \s-1GLOB\s0 (e.g. \e*STDIN), from which the template can be
read.  A reference to a hash array may be passed as the second
parameter, containing definitions of template variables.
.PP
.Vb 1
\&    $text = "[% INCLUDE header %]\enHello world!\en[% INCLUDE footer %]";
\&
\&    # filename
\&    $tt\->process('welcome.tt2')
\&        || die $tt\->error(), "\en";
\&
\&    # text reference
\&    $tt\->process(\e$text)
\&        || die $tt\->error(), "\en";
\&
\&    # GLOB
\&    $tt\->process(\e*DATA)
\&        || die $tt\->error(), "\en";
\&
\&    _\|_END_\|_
\&    [% INCLUDE header %]
\&    This is a template defined in the _\|_END_\|_ section which is 
\&    accessible via the DATA "file handle".
\&    [% INCLUDE footer %]
.Ve
.PP
By default, the processed template output is printed to \s-1STDOUT\s0.  The
\&\fIprocess()\fR method then returns 1 to indicate success.  A third
parameter may be passed to the \fIprocess()\fR method to specify a different
output location.  This value may be one of: a plain string indicating
a filename which will be opened (relative to \s-1OUTPUT_PATH\s0, if defined)
and the output written to; a file \s-1GLOB\s0 opened ready for output; a
reference to a scalar (e.g. a text string) to which output/error is
appended; a reference to a subroutine which is called, passing the
output as a parameter; or any object reference which implements a
\&'print' method (e.g. IO::Handle, Apache::Request, etc.) which will 
be called, passing the generated output as a parameter.
.PP
Examples:
.PP
.Vb 3
\&    # output filename
\&    $tt\->process('welcome.tt2', $vars, 'welcome.html')
\&        || die $tt\->error(), "\en";
\&
\&    # reference to output subroutine
\&    sub myout {
\&        my $output = shift;
\&            ...
\&    }
\&    $tt\->process('welcome.tt2', $vars, \e&myout)
\&        || die $tt\->error(), "\en";
\&
\&    # reference to output text string
\&    my $output = '';
\&    $tt\->process('welcome.tt2', $vars, \e$output)
\&        || die $tt\->error(), "\en";
\&    
\&    print "output: $output\en";
.Ve
.PP
In an Apache/mod_perl handler:
.PP
.Vb 2
\&    sub handler {
\&        my $req = shift;
\&
\&        ...
\&
\&        # direct output to Apache::Request via $req\->print($output)
\&        $tt\->process($file, $vars, $req) || do {
\&            $req\->log_reason($tt\->error());
\&            return SERVER_ERROR;
\&        };
\&
\&        return OK;
\&    }
.Ve
.PP
After the optional third output argument can come an optional
reference to a hash or a list of (name, value) pairs providing further
options for the output.  The only option currently supported is
\&\*(L"binmode\*(R" which, when set to any true value will ensure that files
created (but not any existing file handles passed) will be set to
binary mode.
.PP
.Vb 3
\&    # either: hash reference of options
\&    $tt\->process($infile, $vars, $outfile, { binmode => 1 })
\&        || die $tt\->error(), "\en";
\&
\&    # or: list of name, value pairs
\&    $tt\->process($infile, $vars, $outfile, binmode => 1)
\&        || die $tt\->error(), "\en";
.Ve
.PP
Alternately, the binmode argument can specify a particular \s-1IO\s0 layer such 
as \*(L":utf8\*(R".
.PP
.Vb 2
\&    $tt\->process($infile, $vars, $outfile, binmode => ':utf8')
\&        || die $tt\->error(), "\en";
.Ve
.PP
The \s-1OUTPUT\s0 configuration item can be used to specify a default output 
location other than \e*STDOUT.  The \s-1OUTPUT_PATH\s0 specifies a directory
which should be prefixed to all output locations specified as filenames.
.PP
.Vb 5
\&    my $tt = Template\->new({
\&        OUTPUT      => sub { ... },       # default
\&            OUTPUT_PATH => '/tmp',
\&        ...
\&    }) || die Template\->error(), "\en";
\&
\&    # use default OUTPUT (sub is called)
\&    $tt\->process('welcome.tt2', $vars)
\&        || die $tt\->error(), "\en";
\&
\&    # write file to '/tmp/welcome.html'
\&    $tt\->process('welcome.tt2', $vars, 'welcome.html')
\&        || die $tt\->error(), "\en";
.Ve
.PP
The \fIprocess()\fR method returns 1 on success or undef on error.  The error
message generated in the latter case can be retrieved by calling the
\&\fIerror()\fR method.  See also \*(L"\s-1CONFIGURATION\s0 \s-1SUMMARY\s0\*(R" which describes how
error handling may be further customised.
.Sh "\fIerror()\fP"
.IX Subsection "error()"
When called as a class method, it returns the value of the \f(CW$ERROR\fR package
variable.  Thus, the following are equivalent.
.PP
.Vb 2
\&    my $tt = Template\->new()
\&        || die Template\->error(), "\en";
\&
\&    my $tt = Template\->new()
\&        || die $Template::ERROR, "\en";
.Ve
.PP
When called as an object method, it returns the value of the internal
_ERROR variable, as set by an error condition in a previous call to
\&\fIprocess()\fR.
.PP
.Vb 2
\&    $tt\->process('welcome.tt2')
\&        || die $tt\->error(), "\en";
.Ve
.PP
Errors are represented in the Template Toolkit by objects of the
Template::Exception class.  If the \fIprocess()\fR method returns a false
value then the \fIerror()\fR method can be called to return an object of
this class.  The \fItype()\fR and \fIinfo()\fR methods can called on the object to
retrieve the error type and information string, respectively.  The
\&\fIas_string()\fR method can be called to return a string of the form \*(L"$type
\&\- \f(CW$info\fR\*(R".  This method is also overloaded onto the stringification
operator allowing the object reference itself to be printed to return
the formatted error string.
.PP
.Vb 6
\&    $tt\->process('somefile') || do {
\&        my $error = $tt\->error();
\&            print "error type: ", $error\->type(), "\en";
\&        print "error info: ", $error\->info(), "\en";
\&            print $error, "\en";
\&    };
.Ve
.Sh "\fIservice()\fP"
.IX Subsection "service()"
The Template module delegates most of the effort of processing templates
to an underlying Template::Service object.  This method returns a reference
to that object.
.Sh "\fIcontext()\fP"
.IX Subsection "context()"
The Template::Service module uses a core Template::Context object for
runtime processing of templates.  This method returns a reference to 
that object and is equivalent to \f(CW$template\fR\->service\->\fIcontext()\fR;
.SH "CONFIGURATION SUMMARY"
.IX Header "CONFIGURATION SUMMARY"
The following list gives a short summary of each Template Toolkit 
configuration option.  See Template::Manual::Config for full details.
.Sh "Template Style and Parsing Options"
.IX Subsection "Template Style and Parsing Options"
.IP "\s-1START_TAG\s0, \s-1END_TAG\s0" 4
.IX Item "START_TAG, END_TAG"
Define tokens that indicate start and end of directives (default: '[%' and 
\&'%]').
.IP "\s-1TAG_STYLE\s0" 4
.IX Item "TAG_STYLE"
Set \s-1START_TAG\s0 and \s-1END_TAG\s0 according to a pre-defined style (default: 
\&'template', as above).
.IP "\s-1PRE_CHOMP\s0, \s-1POST_CHOMP\s0" 4
.IX Item "PRE_CHOMP, POST_CHOMP"
Remove whitespace before/after directives (default: 0/0).
.IP "\s-1TRIM\s0" 4
.IX Item "TRIM"
Remove leading and trailing whitespace from template output (default: 0).
.IP "\s-1INTERPOLATE\s0" 4
.IX Item "INTERPOLATE"
Interpolate variables embedded like \f(CW$this\fR or ${this} (default: 0).
.IP "\s-1ANYCASE\s0" 4
.IX Item "ANYCASE"
Allow directive keywords in lower case (default: 0 \- \s-1UPPER\s0 only).
.Sh "Template Files and Blocks"
.IX Subsection "Template Files and Blocks"
.IP "\s-1INCLUDE_PATH\s0" 4
.IX Item "INCLUDE_PATH"
One or more directories to search for templates.
.IP "\s-1DELIMITER\s0" 4
.IX Item "DELIMITER"
Delimiter for separating paths in \s-1INCLUDE_PATH\s0 (default: ':').
.IP "\s-1ABSOLUTE\s0" 4
.IX Item "ABSOLUTE"
Allow absolute file names, e.g. /foo/bar.html (default: 0).
.IP "\s-1RELATIVE\s0" 4
.IX Item "RELATIVE"
Allow relative filenames, e.g. ../foo/bar.html (default: 0).
.IP "\s-1DEFAULT\s0" 4
.IX Item "DEFAULT"
Default template to use when another not found.
.IP "\s-1BLOCKS\s0" 4
.IX Item "BLOCKS"
Hash array pre-defining template blocks.
.IP "\s-1AUTO_RESET\s0" 4
.IX Item "AUTO_RESET"
Enabled by default causing \s-1BLOCK\s0 definitions to be reset each time a 
template is processed.  Disable to allow \s-1BLOCK\s0 definitions to persist.
.IP "\s-1RECURSION\s0" 4
.IX Item "RECURSION"
Flag to permit recursion into templates (default: 0).
.Sh "Template Variables"
.IX Subsection "Template Variables"
.IP "\s-1VARIABLES\s0, \s-1PRE_DEFINE\s0" 4
.IX Item "VARIABLES, PRE_DEFINE"
Hash array of variables and values to pre-define in the stash.
.Sh "Runtime Processing Options"
.IX Subsection "Runtime Processing Options"
.IP "\s-1EVAL_PERL\s0" 4
.IX Item "EVAL_PERL"
Flag to indicate if \s-1PERL/RAWPERL\s0 blocks should be processed (default: 0).
.IP "\s-1PRE_PROCESS\s0, \s-1POST_PROCESS\s0" 4
.IX Item "PRE_PROCESS, POST_PROCESS"
Name of template(s) to process before/after main template.
.IP "\s-1PROCESS\s0" 4
.IX Item "PROCESS"
Name of template(s) to process instead of main template.
.IP "\s-1ERROR\s0" 4
.IX Item "ERROR"
Name of error template or reference to hash array mapping error types to
templates.
.IP "\s-1OUTPUT\s0" 4
.IX Item "OUTPUT"
Default output location or handler.
.IP "\s-1OUTPUT_PATH\s0" 4
.IX Item "OUTPUT_PATH"
Directory into which output files can be written.
.IP "\s-1DEBUG\s0" 4
.IX Item "DEBUG"
Enable debugging messages.
.Sh "Caching and Compiling Options"
.IX Subsection "Caching and Compiling Options"
.IP "\s-1CACHE_SIZE\s0" 4
.IX Item "CACHE_SIZE"
Maximum number of compiled templates to cache in memory (default:
undef \- cache all)
.IP "\s-1COMPILE_EXT\s0" 4
.IX Item "COMPILE_EXT"
Filename extension for compiled template files (default: undef \- don't
compile).
.IP "\s-1COMPILE_DIR\s0" 4
.IX Item "COMPILE_DIR"
Root of directory in which compiled template files should be written
(default: undef \- don't compile).
.Sh "Plugins and Filters"
.IX Subsection "Plugins and Filters"
.IP "\s-1PLUGINS\s0" 4
.IX Item "PLUGINS"
Reference to a hash array mapping plugin names to Perl packages.
.IP "\s-1PLUGIN_BASE\s0" 4
.IX Item "PLUGIN_BASE"
One or more base classes under which plugins may be found.
.IP "\s-1LOAD_PERL\s0" 4
.IX Item "LOAD_PERL"
Flag to indicate regular Perl modules should be loaded if a named plugin 
can't be found  (default: 0).
.IP "\s-1FILTERS\s0" 4
.IX Item "FILTERS"
Hash array mapping filter names to filter subroutines or factories.
.Sh "Compatibility, Customisation and Extension"
.IX Subsection "Compatibility, Customisation and Extension"
.IP "V1DOLLAR" 4
.IX Item "V1DOLLAR"
Backwards compatibility flag enabling version 1.* handling (i.e. ignore it) 
of leading '$' on variables (default: 0 \- '$' indicates interpolation).
.IP "\s-1LOAD_TEMPLATES\s0" 4
.IX Item "LOAD_TEMPLATES"
List of template providers.
.IP "\s-1LOAD_PLUGINS\s0" 4
.IX Item "LOAD_PLUGINS"
List of plugin providers.
.IP "\s-1LOAD_FILTERS\s0" 4
.IX Item "LOAD_FILTERS"
List of filter providers.
.IP "\s-1TOLERANT\s0" 4
.IX Item "TOLERANT"
Set providers to tolerate errors as declinations (default: 0).
.IP "\s-1SERVICE\s0" 4
.IX Item "SERVICE"
Reference to a custom service object (default: Template::Service).
.IP "\s-1CONTEXT\s0" 4
.IX Item "CONTEXT"
Reference to a custom context object (default: Template::Context).
.IP "\s-1STASH\s0" 4
.IX Item "STASH"
Reference to a custom stash object (default: Template::Stash).
.IP "\s-1PARSER\s0" 4
.IX Item "PARSER"
Reference to a custom parser object (default: Template::Parser).
.IP "\s-1GRAMMAR\s0" 4
.IX Item "GRAMMAR"
Reference to a custom grammar object (default: Template::Grammar).
.SH "DIRECTIVE SUMMARY"
.IX Header "DIRECTIVE SUMMARY"
The following list gives a short summary of each Template Toolkit directive.
See Template::Manual::Directives for full details.
.IP "\s-1GET\s0" 4
.IX Item "GET"
Evaluate and print a variable or value.
.Sp
.Vb 1
\&    [%   GET variable %]    # 'GET' keyword is optional
\&
\&    [%       variable %]
\&    [%       hash.key %]
\&    [%         list.n %]
\&    [%     code(args) %]
\&    [% obj.meth(args) %]
\&    [%  "value: $var" %]
.Ve
.IP "\s-1CALL\s0" 4
.IX Item "CALL"
As per \s-1GET\s0 but without printing result (e.g. call code)
.Sp
.Vb 1
\&    [%  CALL variable %]
.Ve
.IP "\s-1SET\s0" 4
.IX Item "SET"
Assign a values to variables.
.Sp
.Vb 1
\&    [% SET variable = value %]    # 'SET' also optional
\&
\&    [%     variable = other_variable
\&           variable = 'literal text @ $100'
\&           variable = "interpolated text: $var"
\&           list     = [ val, val, val, val, ... ]
\&           list     = [ val..val ]
\&           hash     = { var => val, var => val, ... }
\&    %]
.Ve
.IP "\s-1DEFAULT\s0" 4
.IX Item "DEFAULT"
Like \s-1SET\s0 above, but variables are only set if currently unset (i.e. have no
true value).
.Sp
.Vb 1
\&    [% DEFAULT variable = value %]
.Ve
.IP "\s-1INSERT\s0" 4
.IX Item "INSERT"
Insert a file without any processing performed on the contents.
.Sp
.Vb 1
\&    [% INSERT legalese.txt %]
.Ve
.IP "\s-1INCLUDE\s0" 4
.IX Item "INCLUDE"
Process another template file or block and include the output.  Variables
are localised.
.Sp
.Vb 2
\&    [% INCLUDE template %]
\&    [% INCLUDE template  var = val, ... %]
.Ve
.IP "\s-1PROCESS\s0" 4
.IX Item "PROCESS"
As \s-1INCLUDE\s0 above, but without localising variables.
.Sp
.Vb 2
\&    [% PROCESS template %]
\&    [% PROCESS template  var = val, ... %]
.Ve
.IP "\s-1WRAPPER\s0" 4
.IX Item "WRAPPER"
Process the enclosed block \s-1WRAPPER\s0 ... \s-1END\s0 block then \s-1INCLUDE\s0 the 
named template, passing the block output in the 'content' variable.
.Sp
.Vb 3
\&    [% WRAPPER template %]
\&       content...
\&    [% END %]
.Ve
.IP "\s-1BLOCK\s0" 4
.IX Item "BLOCK"
Define a named template block for subsequent \s-1INCLUDE\s0, \s-1PROCESS\s0, etc.,
.Sp
.Vb 3
\&    [% BLOCK template %]
\&       content
\&    [% END %]
.Ve
.IP "\s-1FOREACH\s0" 4
.IX Item "FOREACH"
Repeat the enclosed \s-1FOREACH\s0 ... \s-1END\s0 block for each value in the list.
.Sp
.Vb 6
\&    [% FOREACH variable = [ val, val, val ] %]    # either
\&    [% FOREACH variable = list %]                 # or
\&    [% FOREACH list %]                            # or 
\&       content...
\&       [% variable %]
\&    [% END %]
.Ve
.IP "\s-1WHILE\s0" 4
.IX Item "WHILE"
Enclosed \s-1WHILE\s0 ... \s-1END\s0 block is processed while condition is true.
.Sp
.Vb 3
\&    [% WHILE condition %]
\&       content
\&    [% END %]
.Ve
.IP "\s-1IF\s0 / \s-1UNLESS\s0 / \s-1ELSIF\s0 / \s-1ELSE\s0" 4
.IX Item "IF / UNLESS / ELSIF / ELSE"
Enclosed block is processed if the condition is true / false.
.Sp
.Vb 7
\&    [% IF condition %]
\&       content
\&    [% ELSIF condition %]
\&         content
\&    [% ELSE %]
\&         content
\&    [% END %]
\&
\&    [% UNLESS condition %]
\&       content
\&    [% # ELSIF/ELSE as per IF, above %]
\&       content
\&    [% END %]
.Ve
.IP "\s-1SWITCH\s0 / \s-1CASE\s0" 4
.IX Item "SWITCH / CASE"
Multi-way switch/case statement.
.Sp
.Vb 8
\&    [% SWITCH variable %]
\&    [% CASE val1 %]
\&       content
\&    [% CASE [ val2, val3 ] %]
\&       content
\&    [% CASE %]         # or [% CASE DEFAULT %]
\&       content
\&    [% END %]
.Ve
.IP "\s-1MACRO\s0" 4
.IX Item "MACRO"
Define a named macro.
.Sp
.Vb 5
\&    [% MACRO name <directive> %]
\&    [% MACRO name(arg1, arg2) <directive> %]
\&    ...
\&    [% name %]
\&    [% name(val1, val2) %]
.Ve
.IP "\s-1FILTER\s0" 4
.IX Item "FILTER"
Process enclosed \s-1FILTER\s0 ... \s-1END\s0 block then pipe through a filter.
.Sp
.Vb 5
\&    [% FILTER name %]                       # either
\&    [% FILTER name( params ) %]             # or
\&    [% FILTER alias = name( params ) %]     # or
\&       content
\&    [% END %]
.Ve
.IP "\s-1USE\s0" 4
.IX Item "USE"
Load a \*(L"plugin\*(R" module, or any regular Perl module if \s-1LOAD_PERL\s0 option is
set.
.Sp
.Vb 6
\&    [% USE name %]                          # either
\&    [% USE name( params ) %]                # or
\&    [% USE var = name( params ) %]          # or
\&    ...
\&    [% name.method %]
\&    [% var.method %]
.Ve
.IP "\s-1PERL\s0 / \s-1RAWPERL\s0" 4
.IX Item "PERL / RAWPERL"
Evaluate enclosed blocks as Perl code (requires \s-1EVAL_PERL\s0 option to be set).
.Sp
.Vb 6
\&    [% PERL %]
\&         # perl code goes here
\&         $stash\->set('foo', 10);
\&         print "set 'foo' to ", $stash\->get('foo'), "\en";
\&         print $context\->include('footer', { var => $val });
\&    [% END %]
\&
\&    [% RAWPERL %]
\&       # raw perl code goes here, no magic but fast.
\&       $output .= 'some output';
\&    [% END %]
.Ve
.IP "\s-1TRY\s0 / \s-1THROW\s0 / \s-1CATCH\s0 / \s-1FINAL\s0" 4
.IX Item "TRY / THROW / CATCH / FINAL"
Exception handling.
.Sp
.Vb 11
\&    [% TRY %]
\&         content
\&       [% THROW type info %]
\&    [% CATCH type %]
\&         catch content
\&       [% error.type %] [% error.info %]
\&    [% CATCH %] # or [% CATCH DEFAULT %]
\&         content
\&    [% FINAL %]
\&       this block is always processed
\&    [% END %]
.Ve
.IP "\s-1NEXT\s0" 4
.IX Item "NEXT"
Jump straight to the next item in a \s-1FOREACH/WHILE\s0 loop.
.Sp
.Vb 1
\&    [% NEXT %]
.Ve
.IP "\s-1LAST\s0" 4
.IX Item "LAST"
Break out of \s-1FOREACH/WHILE\s0 loop.
.Sp
.Vb 1
\&    [% LAST %]
.Ve
.IP "\s-1RETURN\s0" 4
.IX Item "RETURN"
Stop processing current template and return to including templates.
.Sp
.Vb 1
\&    [% RETURN %]
.Ve
.IP "\s-1STOP\s0" 4
.IX Item "STOP"
Stop processing all templates and return to caller.
.Sp
.Vb 1
\&    [% STOP %]
.Ve
.IP "\s-1TAGS\s0" 4
.IX Item "TAGS"
Define new tag style or characters (default: [% %]).
.Sp
.Vb 2
\&    [% TAGS html %]
\&    [% TAGS <!\-\- \-\-> %]
.Ve
.IP "\s-1COMMENTS\s0" 4
.IX Item "COMMENTS"
Ignored and deleted.
.Sp
.Vb 3
\&    [% # this is a comment to the end of line
\&       foo = 'bar'
\&    %]
\&
\&    [%# placing the '#' immediately inside the directive
\&        tag comments out the entire directive
\&    %]
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Andy Wardley <abw@wardley.org>
.PP
<http://wardley.org/|http://wardley.org/>
.SH "VERSION"
.IX Header "VERSION"
Template Toolkit version 2.19, released on 27 April 2007.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 1
\&  Copyright (C) 1996\-2007 Andy Wardley.  All Rights Reserved.
.Ve
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
